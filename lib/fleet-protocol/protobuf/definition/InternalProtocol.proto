/**
 * Detailed description can be found at Message structure
 * document located at our Google Disk
 * https://docs.google.com/document/d/1ts1DDmu5vxEagHPvB-IHTW-5ts06XoZTdIjUIOGylGo/
 *
 */

syntax = "proto3";

/*
 * Internal protocol contains messages for module control.
 * Specific module status, command and error messages can be found in modules folder
 */
package InternalProtocol;
option go_package = "../internal/pkg/ba_proto;ba_proto";
option csharp_namespace = "Google.Protobuf.ba_proto";

message InternalClient {
  oneof MessageType {
    DeviceConnect deviceConnect = 1;
    DeviceStatus deviceStatus = 2;
  }
}

message InternalServer {
  oneof MessageType {
    DeviceConnectResponse deviceConnectResponse = 1;
    DeviceCommand deviceCommand = 2;
  }
}
/**
 * Device connect information.
 * Device connect message is used for establishing connection from module client to module server
 * send as first message from module client to module server
 */
message DeviceConnect{
  Device device = 1;
}

/**
 * Device connect response information.
 * Device connect response message is used for establishing connection from module client to module server
 * send as response to deviceConnect message from module server to module client
 */
message DeviceConnectResponse{
  /**
   * Indicates if connection was successful or which error occurred
   */
  enum ResponseType{
    /**
     * Connection successful
     */
    OK = 0;
    /**
     * Device with given name is already connected
     */
    ALREADY_CONNECTED = 1;
    /**
     * Module server does not support given module
     */
    MODULE_NOT_SUPPORTED = 2;
    /**
     * Module loaded by module server does not recognize given device type
     */
    DEVICE_NOT_SUPPORTED = 3;
    /**
     * Device of the same deviceType with higher priority is already connected
     */
    HIGHER_PRIORITY_ALREADY_CONNECTED = 4;
  }
  ResponseType responseType = 1;

  Device device = 2;
}

message DeviceStatus{
  Device device = 1;

  bytes statusData = 2;
}

/*
 * binary command data
 */
message DeviceCommand{
  Device device = 1;

  bytes commandData = 2;
}

/*
 * Identification of a device. Only devices with unique module-deviceType-dataProvider combination can be connected.
 */
message Device{
  /*
   * Enum for specification to which module the messages should be forwarded by internal server.
   * Must mirror the enum number in InternalProtocol.proto
   * RESERVED_MODULE is default module taking control of unspecified messages.
   */
  enum Module{
    /**
     * This is reserved place for a control module, which is default for devices that didn't set correct module
     * It may serve for messages that are not aggregated. TODO will be implemented
     */
    RESERVED_MODULE = 0;
    // Sending missions with the information about the route and stops to the autonomy
    MISSION_MODULE = 1;
    // Control of car accessories
    CAR_ACCESSORY_MODULE = 2;
    reserved 3 to 998;
    EXAMPLE_MODULE = 999;
  }

  /**
   * Serves for internal client to forward message to the correct module.
   */
  Module module = 1;

  /*
   * Device type is module implementation dependent, it is recommended to implement as enumeration.
   */
  uint32 deviceType = 2;

  /**
   * name of role that the device provides, serves for distinction of devices
   * important in device connection, where only single device of a deviceRole type can be connected to a module.
   */
  string deviceRole = 3;

  /*
   * device name
   */
  string deviceName = 4;

  /*
   * Priority of the device. Max priority = 0
   */
  uint32 priority = 5;
}