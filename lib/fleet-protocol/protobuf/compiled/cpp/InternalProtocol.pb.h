// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InternalProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_InternalProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_InternalProtocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InternalProtocol_2eproto;
namespace InternalProtocol {
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceCommand;
struct DeviceCommandDefaultTypeInternal;
extern DeviceCommandDefaultTypeInternal _DeviceCommand_default_instance_;
class DeviceConnect;
struct DeviceConnectDefaultTypeInternal;
extern DeviceConnectDefaultTypeInternal _DeviceConnect_default_instance_;
class DeviceConnectResponse;
struct DeviceConnectResponseDefaultTypeInternal;
extern DeviceConnectResponseDefaultTypeInternal _DeviceConnectResponse_default_instance_;
class DeviceStatus;
struct DeviceStatusDefaultTypeInternal;
extern DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
class InternalClient;
struct InternalClientDefaultTypeInternal;
extern InternalClientDefaultTypeInternal _InternalClient_default_instance_;
class InternalServer;
struct InternalServerDefaultTypeInternal;
extern InternalServerDefaultTypeInternal _InternalServer_default_instance_;
}  // namespace InternalProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::InternalProtocol::Device* Arena::CreateMaybeMessage<::InternalProtocol::Device>(Arena*);
template<> ::InternalProtocol::DeviceCommand* Arena::CreateMaybeMessage<::InternalProtocol::DeviceCommand>(Arena*);
template<> ::InternalProtocol::DeviceConnect* Arena::CreateMaybeMessage<::InternalProtocol::DeviceConnect>(Arena*);
template<> ::InternalProtocol::DeviceConnectResponse* Arena::CreateMaybeMessage<::InternalProtocol::DeviceConnectResponse>(Arena*);
template<> ::InternalProtocol::DeviceStatus* Arena::CreateMaybeMessage<::InternalProtocol::DeviceStatus>(Arena*);
template<> ::InternalProtocol::InternalClient* Arena::CreateMaybeMessage<::InternalProtocol::InternalClient>(Arena*);
template<> ::InternalProtocol::InternalServer* Arena::CreateMaybeMessage<::InternalProtocol::InternalServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InternalProtocol {

enum DeviceConnectResponse_ResponseType : int {
  DeviceConnectResponse_ResponseType_OK = 0,
  DeviceConnectResponse_ResponseType_ALREADY_CONNECTED = 1,
  DeviceConnectResponse_ResponseType_MODULE_NOT_SUPPORTED = 2,
  DeviceConnectResponse_ResponseType_DEVICE_NOT_SUPPORTED = 3,
  DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED = 4,
  DeviceConnectResponse_ResponseType_DeviceConnectResponse_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DeviceConnectResponse_ResponseType_DeviceConnectResponse_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DeviceConnectResponse_ResponseType_IsValid(int value);
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse_ResponseType_ResponseType_MIN = DeviceConnectResponse_ResponseType_OK;
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse_ResponseType_ResponseType_MAX = DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED;
constexpr int DeviceConnectResponse_ResponseType_ResponseType_ARRAYSIZE = DeviceConnectResponse_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceConnectResponse_ResponseType_descriptor();
template<typename T>
inline const std::string& DeviceConnectResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceConnectResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceConnectResponse_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceConnectResponse_ResponseType_descriptor(), enum_t_value);
}
inline bool DeviceConnectResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceConnectResponse_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceConnectResponse_ResponseType>(
    DeviceConnectResponse_ResponseType_descriptor(), name, value);
}
enum Device_Module : int {
  Device_Module_RESERVED_MODULE = 0,
  Device_Module_MISSION_MODULE = 1,
  Device_Module_CAR_ACCESSORY_MODULE = 2,
  Device_Module_EXAMPLE_MODULE = 999,
  Device_Module_Device_Module_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Device_Module_Device_Module_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Device_Module_IsValid(int value);
constexpr Device_Module Device_Module_Module_MIN = Device_Module_RESERVED_MODULE;
constexpr Device_Module Device_Module_Module_MAX = Device_Module_EXAMPLE_MODULE;
constexpr int Device_Module_Module_ARRAYSIZE = Device_Module_Module_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Module_descriptor();
template<typename T>
inline const std::string& Device_Module_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_Module>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_Module_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_Module_descriptor(), enum_t_value);
}
inline bool Device_Module_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_Module* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_Module>(
    Device_Module_descriptor(), name, value);
}
// ===================================================================

class InternalClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.InternalClient) */ {
 public:
  inline InternalClient() : InternalClient(nullptr) {}
  ~InternalClient() override;
  explicit PROTOBUF_CONSTEXPR InternalClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalClient(const InternalClient& from);
  InternalClient(InternalClient&& from) noexcept
    : InternalClient() {
    *this = ::std::move(from);
  }

  inline InternalClient& operator=(const InternalClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalClient& operator=(InternalClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalClient& default_instance() {
    return *internal_default_instance();
  }
  enum MessageTypeCase {
    kDeviceConnect = 1,
    kDeviceStatus = 2,
    MESSAGETYPE_NOT_SET = 0,
  };

  static inline const InternalClient* internal_default_instance() {
    return reinterpret_cast<const InternalClient*>(
               &_InternalClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InternalClient& a, InternalClient& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalClient& from) {
    InternalClient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.InternalClient";
  }
  protected:
  explicit InternalClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceConnectFieldNumber = 1,
    kDeviceStatusFieldNumber = 2,
  };
  // .InternalProtocol.DeviceConnect deviceConnect = 1;
  bool has_deviceconnect() const;
  private:
  bool _internal_has_deviceconnect() const;
  public:
  void clear_deviceconnect();
  const ::InternalProtocol::DeviceConnect& deviceconnect() const;
  PROTOBUF_NODISCARD ::InternalProtocol::DeviceConnect* release_deviceconnect();
  ::InternalProtocol::DeviceConnect* mutable_deviceconnect();
  void set_allocated_deviceconnect(::InternalProtocol::DeviceConnect* deviceconnect);
  private:
  const ::InternalProtocol::DeviceConnect& _internal_deviceconnect() const;
  ::InternalProtocol::DeviceConnect* _internal_mutable_deviceconnect();
  public:
  void unsafe_arena_set_allocated_deviceconnect(
      ::InternalProtocol::DeviceConnect* deviceconnect);
  ::InternalProtocol::DeviceConnect* unsafe_arena_release_deviceconnect();

  // .InternalProtocol.DeviceStatus deviceStatus = 2;
  bool has_devicestatus() const;
  private:
  bool _internal_has_devicestatus() const;
  public:
  void clear_devicestatus();
  const ::InternalProtocol::DeviceStatus& devicestatus() const;
  PROTOBUF_NODISCARD ::InternalProtocol::DeviceStatus* release_devicestatus();
  ::InternalProtocol::DeviceStatus* mutable_devicestatus();
  void set_allocated_devicestatus(::InternalProtocol::DeviceStatus* devicestatus);
  private:
  const ::InternalProtocol::DeviceStatus& _internal_devicestatus() const;
  ::InternalProtocol::DeviceStatus* _internal_mutable_devicestatus();
  public:
  void unsafe_arena_set_allocated_devicestatus(
      ::InternalProtocol::DeviceStatus* devicestatus);
  ::InternalProtocol::DeviceStatus* unsafe_arena_release_devicestatus();

  void clear_MessageType();
  MessageTypeCase MessageType_case() const;
  // @@protoc_insertion_point(class_scope:InternalProtocol.InternalClient)
 private:
  class _Internal;
  void set_has_deviceconnect();
  void set_has_devicestatus();

  inline bool has_MessageType() const;
  inline void clear_has_MessageType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageTypeUnion {
      constexpr MessageTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::InternalProtocol::DeviceConnect* deviceconnect_;
      ::InternalProtocol::DeviceStatus* devicestatus_;
    } MessageType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class InternalServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.InternalServer) */ {
 public:
  inline InternalServer() : InternalServer(nullptr) {}
  ~InternalServer() override;
  explicit PROTOBUF_CONSTEXPR InternalServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalServer(const InternalServer& from);
  InternalServer(InternalServer&& from) noexcept
    : InternalServer() {
    *this = ::std::move(from);
  }

  inline InternalServer& operator=(const InternalServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalServer& operator=(InternalServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalServer& default_instance() {
    return *internal_default_instance();
  }
  enum MessageTypeCase {
    kDeviceConnectResponse = 1,
    kDeviceCommand = 2,
    MESSAGETYPE_NOT_SET = 0,
  };

  static inline const InternalServer* internal_default_instance() {
    return reinterpret_cast<const InternalServer*>(
               &_InternalServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InternalServer& a, InternalServer& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalServer& from) {
    InternalServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.InternalServer";
  }
  protected:
  explicit InternalServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceConnectResponseFieldNumber = 1,
    kDeviceCommandFieldNumber = 2,
  };
  // .InternalProtocol.DeviceConnectResponse deviceConnectResponse = 1;
  bool has_deviceconnectresponse() const;
  private:
  bool _internal_has_deviceconnectresponse() const;
  public:
  void clear_deviceconnectresponse();
  const ::InternalProtocol::DeviceConnectResponse& deviceconnectresponse() const;
  PROTOBUF_NODISCARD ::InternalProtocol::DeviceConnectResponse* release_deviceconnectresponse();
  ::InternalProtocol::DeviceConnectResponse* mutable_deviceconnectresponse();
  void set_allocated_deviceconnectresponse(::InternalProtocol::DeviceConnectResponse* deviceconnectresponse);
  private:
  const ::InternalProtocol::DeviceConnectResponse& _internal_deviceconnectresponse() const;
  ::InternalProtocol::DeviceConnectResponse* _internal_mutable_deviceconnectresponse();
  public:
  void unsafe_arena_set_allocated_deviceconnectresponse(
      ::InternalProtocol::DeviceConnectResponse* deviceconnectresponse);
  ::InternalProtocol::DeviceConnectResponse* unsafe_arena_release_deviceconnectresponse();

  // .InternalProtocol.DeviceCommand deviceCommand = 2;
  bool has_devicecommand() const;
  private:
  bool _internal_has_devicecommand() const;
  public:
  void clear_devicecommand();
  const ::InternalProtocol::DeviceCommand& devicecommand() const;
  PROTOBUF_NODISCARD ::InternalProtocol::DeviceCommand* release_devicecommand();
  ::InternalProtocol::DeviceCommand* mutable_devicecommand();
  void set_allocated_devicecommand(::InternalProtocol::DeviceCommand* devicecommand);
  private:
  const ::InternalProtocol::DeviceCommand& _internal_devicecommand() const;
  ::InternalProtocol::DeviceCommand* _internal_mutable_devicecommand();
  public:
  void unsafe_arena_set_allocated_devicecommand(
      ::InternalProtocol::DeviceCommand* devicecommand);
  ::InternalProtocol::DeviceCommand* unsafe_arena_release_devicecommand();

  void clear_MessageType();
  MessageTypeCase MessageType_case() const;
  // @@protoc_insertion_point(class_scope:InternalProtocol.InternalServer)
 private:
  class _Internal;
  void set_has_deviceconnectresponse();
  void set_has_devicecommand();

  inline bool has_MessageType() const;
  inline void clear_has_MessageType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageTypeUnion {
      constexpr MessageTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::InternalProtocol::DeviceConnectResponse* deviceconnectresponse_;
      ::InternalProtocol::DeviceCommand* devicecommand_;
    } MessageType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeviceConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.DeviceConnect) */ {
 public:
  inline DeviceConnect() : DeviceConnect(nullptr) {}
  ~DeviceConnect() override;
  explicit PROTOBUF_CONSTEXPR DeviceConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceConnect(const DeviceConnect& from);
  DeviceConnect(DeviceConnect&& from) noexcept
    : DeviceConnect() {
    *this = ::std::move(from);
  }

  inline DeviceConnect& operator=(const DeviceConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConnect& operator=(DeviceConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConnect* internal_default_instance() {
    return reinterpret_cast<const DeviceConnect*>(
               &_DeviceConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceConnect& a, DeviceConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceConnect& from) {
    DeviceConnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.DeviceConnect";
  }
  protected:
  explicit DeviceConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .InternalProtocol.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::InternalProtocol::Device& device() const;
  PROTOBUF_NODISCARD ::InternalProtocol::Device* release_device();
  ::InternalProtocol::Device* mutable_device();
  void set_allocated_device(::InternalProtocol::Device* device);
  private:
  const ::InternalProtocol::Device& _internal_device() const;
  ::InternalProtocol::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::InternalProtocol::Device* device);
  ::InternalProtocol::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:InternalProtocol.DeviceConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::InternalProtocol::Device* device_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeviceConnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.DeviceConnectResponse) */ {
 public:
  inline DeviceConnectResponse() : DeviceConnectResponse(nullptr) {}
  ~DeviceConnectResponse() override;
  explicit PROTOBUF_CONSTEXPR DeviceConnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceConnectResponse(const DeviceConnectResponse& from);
  DeviceConnectResponse(DeviceConnectResponse&& from) noexcept
    : DeviceConnectResponse() {
    *this = ::std::move(from);
  }

  inline DeviceConnectResponse& operator=(const DeviceConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConnectResponse& operator=(DeviceConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConnectResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceConnectResponse*>(
               &_DeviceConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceConnectResponse& a, DeviceConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConnectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceConnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceConnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceConnectResponse& from) {
    DeviceConnectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConnectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.DeviceConnectResponse";
  }
  protected:
  explicit DeviceConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeviceConnectResponse_ResponseType ResponseType;
  static constexpr ResponseType OK =
    DeviceConnectResponse_ResponseType_OK;
  static constexpr ResponseType ALREADY_CONNECTED =
    DeviceConnectResponse_ResponseType_ALREADY_CONNECTED;
  static constexpr ResponseType MODULE_NOT_SUPPORTED =
    DeviceConnectResponse_ResponseType_MODULE_NOT_SUPPORTED;
  static constexpr ResponseType DEVICE_NOT_SUPPORTED =
    DeviceConnectResponse_ResponseType_DEVICE_NOT_SUPPORTED;
  static constexpr ResponseType HIGHER_PRIORITY_ALREADY_CONNECTED =
    DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED;
  static inline bool ResponseType_IsValid(int value) {
    return DeviceConnectResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    DeviceConnectResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    DeviceConnectResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    DeviceConnectResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return DeviceConnectResponse_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return DeviceConnectResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return DeviceConnectResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 2,
    kResponseTypeFieldNumber = 1,
  };
  // .InternalProtocol.Device device = 2;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::InternalProtocol::Device& device() const;
  PROTOBUF_NODISCARD ::InternalProtocol::Device* release_device();
  ::InternalProtocol::Device* mutable_device();
  void set_allocated_device(::InternalProtocol::Device* device);
  private:
  const ::InternalProtocol::Device& _internal_device() const;
  ::InternalProtocol::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::InternalProtocol::Device* device);
  ::InternalProtocol::Device* unsafe_arena_release_device();

  // .InternalProtocol.DeviceConnectResponse.ResponseType responseType = 1;
  void clear_responsetype();
  ::InternalProtocol::DeviceConnectResponse_ResponseType responsetype() const;
  void set_responsetype(::InternalProtocol::DeviceConnectResponse_ResponseType value);
  private:
  ::InternalProtocol::DeviceConnectResponse_ResponseType _internal_responsetype() const;
  void _internal_set_responsetype(::InternalProtocol::DeviceConnectResponse_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:InternalProtocol.DeviceConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::InternalProtocol::Device* device_;
    int responsetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeviceStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.DeviceStatus) */ {
 public:
  inline DeviceStatus() : DeviceStatus(nullptr) {}
  ~DeviceStatus() override;
  explicit PROTOBUF_CONSTEXPR DeviceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceStatus(const DeviceStatus& from);
  DeviceStatus(DeviceStatus&& from) noexcept
    : DeviceStatus() {
    *this = ::std::move(from);
  }

  inline DeviceStatus& operator=(const DeviceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStatus& operator=(DeviceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceStatus*>(
               &_DeviceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceStatus& a, DeviceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceStatus& from) {
    DeviceStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.DeviceStatus";
  }
  protected:
  explicit DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusDataFieldNumber = 2,
    kDeviceFieldNumber = 1,
  };
  // bytes statusData = 2;
  void clear_statusdata();
  const std::string& statusdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statusdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statusdata();
  PROTOBUF_NODISCARD std::string* release_statusdata();
  void set_allocated_statusdata(std::string* statusdata);
  private:
  const std::string& _internal_statusdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statusdata(const std::string& value);
  std::string* _internal_mutable_statusdata();
  public:

  // .InternalProtocol.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::InternalProtocol::Device& device() const;
  PROTOBUF_NODISCARD ::InternalProtocol::Device* release_device();
  ::InternalProtocol::Device* mutable_device();
  void set_allocated_device(::InternalProtocol::Device* device);
  private:
  const ::InternalProtocol::Device& _internal_device() const;
  ::InternalProtocol::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::InternalProtocol::Device* device);
  ::InternalProtocol::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:InternalProtocol.DeviceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statusdata_;
    ::InternalProtocol::Device* device_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeviceCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.DeviceCommand) */ {
 public:
  inline DeviceCommand() : DeviceCommand(nullptr) {}
  ~DeviceCommand() override;
  explicit PROTOBUF_CONSTEXPR DeviceCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceCommand(const DeviceCommand& from);
  DeviceCommand(DeviceCommand&& from) noexcept
    : DeviceCommand() {
    *this = ::std::move(from);
  }

  inline DeviceCommand& operator=(const DeviceCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCommand& operator=(DeviceCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCommand* internal_default_instance() {
    return reinterpret_cast<const DeviceCommand*>(
               &_DeviceCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeviceCommand& a, DeviceCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceCommand& from) {
    DeviceCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.DeviceCommand";
  }
  protected:
  explicit DeviceCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandDataFieldNumber = 2,
    kDeviceFieldNumber = 1,
  };
  // bytes commandData = 2;
  void clear_commanddata();
  const std::string& commanddata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commanddata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commanddata();
  PROTOBUF_NODISCARD std::string* release_commanddata();
  void set_allocated_commanddata(std::string* commanddata);
  private:
  const std::string& _internal_commanddata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commanddata(const std::string& value);
  std::string* _internal_mutable_commanddata();
  public:

  // .InternalProtocol.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::InternalProtocol::Device& device() const;
  PROTOBUF_NODISCARD ::InternalProtocol::Device* release_device();
  ::InternalProtocol::Device* mutable_device();
  void set_allocated_device(::InternalProtocol::Device* device);
  private:
  const ::InternalProtocol::Device& _internal_device() const;
  ::InternalProtocol::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::InternalProtocol::Device* device);
  ::InternalProtocol::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:InternalProtocol.DeviceCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commanddata_;
    ::InternalProtocol::Device* device_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit PROTOBUF_CONSTEXPR Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Device& from) {
    Device::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Device_Module Module;
  static constexpr Module RESERVED_MODULE =
    Device_Module_RESERVED_MODULE;
  static constexpr Module MISSION_MODULE =
    Device_Module_MISSION_MODULE;
  static constexpr Module CAR_ACCESSORY_MODULE =
    Device_Module_CAR_ACCESSORY_MODULE;
  static constexpr Module EXAMPLE_MODULE =
    Device_Module_EXAMPLE_MODULE;
  static inline bool Module_IsValid(int value) {
    return Device_Module_IsValid(value);
  }
  static constexpr Module Module_MIN =
    Device_Module_Module_MIN;
  static constexpr Module Module_MAX =
    Device_Module_Module_MAX;
  static constexpr int Module_ARRAYSIZE =
    Device_Module_Module_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Module_descriptor() {
    return Device_Module_descriptor();
  }
  template<typename T>
  static inline const std::string& Module_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Module>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Module_Name.");
    return Device_Module_Name(enum_t_value);
  }
  static inline bool Module_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Module* value) {
    return Device_Module_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceRoleFieldNumber = 3,
    kDeviceNameFieldNumber = 4,
    kModuleFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kPriorityFieldNumber = 5,
  };
  // string deviceRole = 3;
  void clear_devicerole();
  const std::string& devicerole() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicerole(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicerole();
  PROTOBUF_NODISCARD std::string* release_devicerole();
  void set_allocated_devicerole(std::string* devicerole);
  private:
  const std::string& _internal_devicerole() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicerole(const std::string& value);
  std::string* _internal_mutable_devicerole();
  public:

  // string deviceName = 4;
  void clear_devicename();
  const std::string& devicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // .InternalProtocol.Device.Module module = 1;
  void clear_module();
  ::InternalProtocol::Device_Module module() const;
  void set_module(::InternalProtocol::Device_Module value);
  private:
  ::InternalProtocol::Device_Module _internal_module() const;
  void _internal_set_module(::InternalProtocol::Device_Module value);
  public:

  // uint32 deviceType = 2;
  void clear_devicetype();
  uint32_t devicetype() const;
  void set_devicetype(uint32_t value);
  private:
  uint32_t _internal_devicetype() const;
  void _internal_set_devicetype(uint32_t value);
  public:

  // uint32 priority = 5;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:InternalProtocol.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicerole_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
    int module_;
    uint32_t devicetype_;
    uint32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InternalClient

// .InternalProtocol.DeviceConnect deviceConnect = 1;
inline bool InternalClient::_internal_has_deviceconnect() const {
  return MessageType_case() == kDeviceConnect;
}
inline bool InternalClient::has_deviceconnect() const {
  return _internal_has_deviceconnect();
}
inline void InternalClient::set_has_deviceconnect() {
  _impl_._oneof_case_[0] = kDeviceConnect;
}
inline void InternalClient::clear_deviceconnect() {
  if (_internal_has_deviceconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MessageType_.deviceconnect_;
    }
    clear_has_MessageType();
  }
}
inline ::InternalProtocol::DeviceConnect* InternalClient::release_deviceconnect() {
  // @@protoc_insertion_point(field_release:InternalProtocol.InternalClient.deviceConnect)
  if (_internal_has_deviceconnect()) {
    clear_has_MessageType();
    ::InternalProtocol::DeviceConnect* temp = _impl_.MessageType_.deviceconnect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.deviceconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InternalProtocol::DeviceConnect& InternalClient::_internal_deviceconnect() const {
  return _internal_has_deviceconnect()
      ? *_impl_.MessageType_.deviceconnect_
      : reinterpret_cast< ::InternalProtocol::DeviceConnect&>(::InternalProtocol::_DeviceConnect_default_instance_);
}
inline const ::InternalProtocol::DeviceConnect& InternalClient::deviceconnect() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.InternalClient.deviceConnect)
  return _internal_deviceconnect();
}
inline ::InternalProtocol::DeviceConnect* InternalClient::unsafe_arena_release_deviceconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InternalProtocol.InternalClient.deviceConnect)
  if (_internal_has_deviceconnect()) {
    clear_has_MessageType();
    ::InternalProtocol::DeviceConnect* temp = _impl_.MessageType_.deviceconnect_;
    _impl_.MessageType_.deviceconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InternalClient::unsafe_arena_set_allocated_deviceconnect(::InternalProtocol::DeviceConnect* deviceconnect) {
  clear_MessageType();
  if (deviceconnect) {
    set_has_deviceconnect();
    _impl_.MessageType_.deviceconnect_ = deviceconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InternalProtocol.InternalClient.deviceConnect)
}
inline ::InternalProtocol::DeviceConnect* InternalClient::_internal_mutable_deviceconnect() {
  if (!_internal_has_deviceconnect()) {
    clear_MessageType();
    set_has_deviceconnect();
    _impl_.MessageType_.deviceconnect_ = CreateMaybeMessage< ::InternalProtocol::DeviceConnect >(GetArenaForAllocation());
  }
  return _impl_.MessageType_.deviceconnect_;
}
inline ::InternalProtocol::DeviceConnect* InternalClient::mutable_deviceconnect() {
  ::InternalProtocol::DeviceConnect* _msg = _internal_mutable_deviceconnect();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.InternalClient.deviceConnect)
  return _msg;
}

// .InternalProtocol.DeviceStatus deviceStatus = 2;
inline bool InternalClient::_internal_has_devicestatus() const {
  return MessageType_case() == kDeviceStatus;
}
inline bool InternalClient::has_devicestatus() const {
  return _internal_has_devicestatus();
}
inline void InternalClient::set_has_devicestatus() {
  _impl_._oneof_case_[0] = kDeviceStatus;
}
inline void InternalClient::clear_devicestatus() {
  if (_internal_has_devicestatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MessageType_.devicestatus_;
    }
    clear_has_MessageType();
  }
}
inline ::InternalProtocol::DeviceStatus* InternalClient::release_devicestatus() {
  // @@protoc_insertion_point(field_release:InternalProtocol.InternalClient.deviceStatus)
  if (_internal_has_devicestatus()) {
    clear_has_MessageType();
    ::InternalProtocol::DeviceStatus* temp = _impl_.MessageType_.devicestatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.devicestatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InternalProtocol::DeviceStatus& InternalClient::_internal_devicestatus() const {
  return _internal_has_devicestatus()
      ? *_impl_.MessageType_.devicestatus_
      : reinterpret_cast< ::InternalProtocol::DeviceStatus&>(::InternalProtocol::_DeviceStatus_default_instance_);
}
inline const ::InternalProtocol::DeviceStatus& InternalClient::devicestatus() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.InternalClient.deviceStatus)
  return _internal_devicestatus();
}
inline ::InternalProtocol::DeviceStatus* InternalClient::unsafe_arena_release_devicestatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InternalProtocol.InternalClient.deviceStatus)
  if (_internal_has_devicestatus()) {
    clear_has_MessageType();
    ::InternalProtocol::DeviceStatus* temp = _impl_.MessageType_.devicestatus_;
    _impl_.MessageType_.devicestatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InternalClient::unsafe_arena_set_allocated_devicestatus(::InternalProtocol::DeviceStatus* devicestatus) {
  clear_MessageType();
  if (devicestatus) {
    set_has_devicestatus();
    _impl_.MessageType_.devicestatus_ = devicestatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InternalProtocol.InternalClient.deviceStatus)
}
inline ::InternalProtocol::DeviceStatus* InternalClient::_internal_mutable_devicestatus() {
  if (!_internal_has_devicestatus()) {
    clear_MessageType();
    set_has_devicestatus();
    _impl_.MessageType_.devicestatus_ = CreateMaybeMessage< ::InternalProtocol::DeviceStatus >(GetArenaForAllocation());
  }
  return _impl_.MessageType_.devicestatus_;
}
inline ::InternalProtocol::DeviceStatus* InternalClient::mutable_devicestatus() {
  ::InternalProtocol::DeviceStatus* _msg = _internal_mutable_devicestatus();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.InternalClient.deviceStatus)
  return _msg;
}

inline bool InternalClient::has_MessageType() const {
  return MessageType_case() != MESSAGETYPE_NOT_SET;
}
inline void InternalClient::clear_has_MessageType() {
  _impl_._oneof_case_[0] = MESSAGETYPE_NOT_SET;
}
inline InternalClient::MessageTypeCase InternalClient::MessageType_case() const {
  return InternalClient::MessageTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// InternalServer

// .InternalProtocol.DeviceConnectResponse deviceConnectResponse = 1;
inline bool InternalServer::_internal_has_deviceconnectresponse() const {
  return MessageType_case() == kDeviceConnectResponse;
}
inline bool InternalServer::has_deviceconnectresponse() const {
  return _internal_has_deviceconnectresponse();
}
inline void InternalServer::set_has_deviceconnectresponse() {
  _impl_._oneof_case_[0] = kDeviceConnectResponse;
}
inline void InternalServer::clear_deviceconnectresponse() {
  if (_internal_has_deviceconnectresponse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MessageType_.deviceconnectresponse_;
    }
    clear_has_MessageType();
  }
}
inline ::InternalProtocol::DeviceConnectResponse* InternalServer::release_deviceconnectresponse() {
  // @@protoc_insertion_point(field_release:InternalProtocol.InternalServer.deviceConnectResponse)
  if (_internal_has_deviceconnectresponse()) {
    clear_has_MessageType();
    ::InternalProtocol::DeviceConnectResponse* temp = _impl_.MessageType_.deviceconnectresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.deviceconnectresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InternalProtocol::DeviceConnectResponse& InternalServer::_internal_deviceconnectresponse() const {
  return _internal_has_deviceconnectresponse()
      ? *_impl_.MessageType_.deviceconnectresponse_
      : reinterpret_cast< ::InternalProtocol::DeviceConnectResponse&>(::InternalProtocol::_DeviceConnectResponse_default_instance_);
}
inline const ::InternalProtocol::DeviceConnectResponse& InternalServer::deviceconnectresponse() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.InternalServer.deviceConnectResponse)
  return _internal_deviceconnectresponse();
}
inline ::InternalProtocol::DeviceConnectResponse* InternalServer::unsafe_arena_release_deviceconnectresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InternalProtocol.InternalServer.deviceConnectResponse)
  if (_internal_has_deviceconnectresponse()) {
    clear_has_MessageType();
    ::InternalProtocol::DeviceConnectResponse* temp = _impl_.MessageType_.deviceconnectresponse_;
    _impl_.MessageType_.deviceconnectresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InternalServer::unsafe_arena_set_allocated_deviceconnectresponse(::InternalProtocol::DeviceConnectResponse* deviceconnectresponse) {
  clear_MessageType();
  if (deviceconnectresponse) {
    set_has_deviceconnectresponse();
    _impl_.MessageType_.deviceconnectresponse_ = deviceconnectresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InternalProtocol.InternalServer.deviceConnectResponse)
}
inline ::InternalProtocol::DeviceConnectResponse* InternalServer::_internal_mutable_deviceconnectresponse() {
  if (!_internal_has_deviceconnectresponse()) {
    clear_MessageType();
    set_has_deviceconnectresponse();
    _impl_.MessageType_.deviceconnectresponse_ = CreateMaybeMessage< ::InternalProtocol::DeviceConnectResponse >(GetArenaForAllocation());
  }
  return _impl_.MessageType_.deviceconnectresponse_;
}
inline ::InternalProtocol::DeviceConnectResponse* InternalServer::mutable_deviceconnectresponse() {
  ::InternalProtocol::DeviceConnectResponse* _msg = _internal_mutable_deviceconnectresponse();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.InternalServer.deviceConnectResponse)
  return _msg;
}

// .InternalProtocol.DeviceCommand deviceCommand = 2;
inline bool InternalServer::_internal_has_devicecommand() const {
  return MessageType_case() == kDeviceCommand;
}
inline bool InternalServer::has_devicecommand() const {
  return _internal_has_devicecommand();
}
inline void InternalServer::set_has_devicecommand() {
  _impl_._oneof_case_[0] = kDeviceCommand;
}
inline void InternalServer::clear_devicecommand() {
  if (_internal_has_devicecommand()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MessageType_.devicecommand_;
    }
    clear_has_MessageType();
  }
}
inline ::InternalProtocol::DeviceCommand* InternalServer::release_devicecommand() {
  // @@protoc_insertion_point(field_release:InternalProtocol.InternalServer.deviceCommand)
  if (_internal_has_devicecommand()) {
    clear_has_MessageType();
    ::InternalProtocol::DeviceCommand* temp = _impl_.MessageType_.devicecommand_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.devicecommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InternalProtocol::DeviceCommand& InternalServer::_internal_devicecommand() const {
  return _internal_has_devicecommand()
      ? *_impl_.MessageType_.devicecommand_
      : reinterpret_cast< ::InternalProtocol::DeviceCommand&>(::InternalProtocol::_DeviceCommand_default_instance_);
}
inline const ::InternalProtocol::DeviceCommand& InternalServer::devicecommand() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.InternalServer.deviceCommand)
  return _internal_devicecommand();
}
inline ::InternalProtocol::DeviceCommand* InternalServer::unsafe_arena_release_devicecommand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InternalProtocol.InternalServer.deviceCommand)
  if (_internal_has_devicecommand()) {
    clear_has_MessageType();
    ::InternalProtocol::DeviceCommand* temp = _impl_.MessageType_.devicecommand_;
    _impl_.MessageType_.devicecommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InternalServer::unsafe_arena_set_allocated_devicecommand(::InternalProtocol::DeviceCommand* devicecommand) {
  clear_MessageType();
  if (devicecommand) {
    set_has_devicecommand();
    _impl_.MessageType_.devicecommand_ = devicecommand;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InternalProtocol.InternalServer.deviceCommand)
}
inline ::InternalProtocol::DeviceCommand* InternalServer::_internal_mutable_devicecommand() {
  if (!_internal_has_devicecommand()) {
    clear_MessageType();
    set_has_devicecommand();
    _impl_.MessageType_.devicecommand_ = CreateMaybeMessage< ::InternalProtocol::DeviceCommand >(GetArenaForAllocation());
  }
  return _impl_.MessageType_.devicecommand_;
}
inline ::InternalProtocol::DeviceCommand* InternalServer::mutable_devicecommand() {
  ::InternalProtocol::DeviceCommand* _msg = _internal_mutable_devicecommand();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.InternalServer.deviceCommand)
  return _msg;
}

inline bool InternalServer::has_MessageType() const {
  return MessageType_case() != MESSAGETYPE_NOT_SET;
}
inline void InternalServer::clear_has_MessageType() {
  _impl_._oneof_case_[0] = MESSAGETYPE_NOT_SET;
}
inline InternalServer::MessageTypeCase InternalServer::MessageType_case() const {
  return InternalServer::MessageTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeviceConnect

// .InternalProtocol.Device device = 1;
inline bool DeviceConnect::_internal_has_device() const {
  return this != internal_default_instance() && _impl_.device_ != nullptr;
}
inline bool DeviceConnect::has_device() const {
  return _internal_has_device();
}
inline void DeviceConnect::clear_device() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
}
inline const ::InternalProtocol::Device& DeviceConnect::_internal_device() const {
  const ::InternalProtocol::Device* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::InternalProtocol::Device&>(
      ::InternalProtocol::_Device_default_instance_);
}
inline const ::InternalProtocol::Device& DeviceConnect::device() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceConnect.device)
  return _internal_device();
}
inline void DeviceConnect::unsafe_arena_set_allocated_device(
    ::InternalProtocol::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InternalProtocol.DeviceConnect.device)
}
inline ::InternalProtocol::Device* DeviceConnect::release_device() {
  
  ::InternalProtocol::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InternalProtocol::Device* DeviceConnect::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:InternalProtocol.DeviceConnect.device)
  
  ::InternalProtocol::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::InternalProtocol::Device* DeviceConnect::_internal_mutable_device() {
  
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::InternalProtocol::Device>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::InternalProtocol::Device* DeviceConnect::mutable_device() {
  ::InternalProtocol::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.DeviceConnect.device)
  return _msg;
}
inline void DeviceConnect::set_allocated_device(::InternalProtocol::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.DeviceConnect.device)
}

// -------------------------------------------------------------------

// DeviceConnectResponse

// .InternalProtocol.DeviceConnectResponse.ResponseType responseType = 1;
inline void DeviceConnectResponse::clear_responsetype() {
  _impl_.responsetype_ = 0;
}
inline ::InternalProtocol::DeviceConnectResponse_ResponseType DeviceConnectResponse::_internal_responsetype() const {
  return static_cast< ::InternalProtocol::DeviceConnectResponse_ResponseType >(_impl_.responsetype_);
}
inline ::InternalProtocol::DeviceConnectResponse_ResponseType DeviceConnectResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceConnectResponse.responseType)
  return _internal_responsetype();
}
inline void DeviceConnectResponse::_internal_set_responsetype(::InternalProtocol::DeviceConnectResponse_ResponseType value) {
  
  _impl_.responsetype_ = value;
}
inline void DeviceConnectResponse::set_responsetype(::InternalProtocol::DeviceConnectResponse_ResponseType value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.DeviceConnectResponse.responseType)
}

// .InternalProtocol.Device device = 2;
inline bool DeviceConnectResponse::_internal_has_device() const {
  return this != internal_default_instance() && _impl_.device_ != nullptr;
}
inline bool DeviceConnectResponse::has_device() const {
  return _internal_has_device();
}
inline void DeviceConnectResponse::clear_device() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
}
inline const ::InternalProtocol::Device& DeviceConnectResponse::_internal_device() const {
  const ::InternalProtocol::Device* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::InternalProtocol::Device&>(
      ::InternalProtocol::_Device_default_instance_);
}
inline const ::InternalProtocol::Device& DeviceConnectResponse::device() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceConnectResponse.device)
  return _internal_device();
}
inline void DeviceConnectResponse::unsafe_arena_set_allocated_device(
    ::InternalProtocol::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InternalProtocol.DeviceConnectResponse.device)
}
inline ::InternalProtocol::Device* DeviceConnectResponse::release_device() {
  
  ::InternalProtocol::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InternalProtocol::Device* DeviceConnectResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:InternalProtocol.DeviceConnectResponse.device)
  
  ::InternalProtocol::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::InternalProtocol::Device* DeviceConnectResponse::_internal_mutable_device() {
  
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::InternalProtocol::Device>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::InternalProtocol::Device* DeviceConnectResponse::mutable_device() {
  ::InternalProtocol::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.DeviceConnectResponse.device)
  return _msg;
}
inline void DeviceConnectResponse::set_allocated_device(::InternalProtocol::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.DeviceConnectResponse.device)
}

// -------------------------------------------------------------------

// DeviceStatus

// .InternalProtocol.Device device = 1;
inline bool DeviceStatus::_internal_has_device() const {
  return this != internal_default_instance() && _impl_.device_ != nullptr;
}
inline bool DeviceStatus::has_device() const {
  return _internal_has_device();
}
inline void DeviceStatus::clear_device() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
}
inline const ::InternalProtocol::Device& DeviceStatus::_internal_device() const {
  const ::InternalProtocol::Device* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::InternalProtocol::Device&>(
      ::InternalProtocol::_Device_default_instance_);
}
inline const ::InternalProtocol::Device& DeviceStatus::device() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceStatus.device)
  return _internal_device();
}
inline void DeviceStatus::unsafe_arena_set_allocated_device(
    ::InternalProtocol::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InternalProtocol.DeviceStatus.device)
}
inline ::InternalProtocol::Device* DeviceStatus::release_device() {
  
  ::InternalProtocol::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InternalProtocol::Device* DeviceStatus::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:InternalProtocol.DeviceStatus.device)
  
  ::InternalProtocol::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::InternalProtocol::Device* DeviceStatus::_internal_mutable_device() {
  
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::InternalProtocol::Device>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::InternalProtocol::Device* DeviceStatus::mutable_device() {
  ::InternalProtocol::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.DeviceStatus.device)
  return _msg;
}
inline void DeviceStatus::set_allocated_device(::InternalProtocol::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.DeviceStatus.device)
}

// bytes statusData = 2;
inline void DeviceStatus::clear_statusdata() {
  _impl_.statusdata_.ClearToEmpty();
}
inline const std::string& DeviceStatus::statusdata() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceStatus.statusData)
  return _internal_statusdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceStatus::set_statusdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.statusdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InternalProtocol.DeviceStatus.statusData)
}
inline std::string* DeviceStatus::mutable_statusdata() {
  std::string* _s = _internal_mutable_statusdata();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.DeviceStatus.statusData)
  return _s;
}
inline const std::string& DeviceStatus::_internal_statusdata() const {
  return _impl_.statusdata_.Get();
}
inline void DeviceStatus::_internal_set_statusdata(const std::string& value) {
  
  _impl_.statusdata_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceStatus::_internal_mutable_statusdata() {
  
  return _impl_.statusdata_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceStatus::release_statusdata() {
  // @@protoc_insertion_point(field_release:InternalProtocol.DeviceStatus.statusData)
  return _impl_.statusdata_.Release();
}
inline void DeviceStatus::set_allocated_statusdata(std::string* statusdata) {
  if (statusdata != nullptr) {
    
  } else {
    
  }
  _impl_.statusdata_.SetAllocated(statusdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.statusdata_.IsDefault()) {
    _impl_.statusdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.DeviceStatus.statusData)
}

// -------------------------------------------------------------------

// DeviceCommand

// .InternalProtocol.Device device = 1;
inline bool DeviceCommand::_internal_has_device() const {
  return this != internal_default_instance() && _impl_.device_ != nullptr;
}
inline bool DeviceCommand::has_device() const {
  return _internal_has_device();
}
inline void DeviceCommand::clear_device() {
  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
}
inline const ::InternalProtocol::Device& DeviceCommand::_internal_device() const {
  const ::InternalProtocol::Device* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::InternalProtocol::Device&>(
      ::InternalProtocol::_Device_default_instance_);
}
inline const ::InternalProtocol::Device& DeviceCommand::device() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceCommand.device)
  return _internal_device();
}
inline void DeviceCommand::unsafe_arena_set_allocated_device(
    ::InternalProtocol::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InternalProtocol.DeviceCommand.device)
}
inline ::InternalProtocol::Device* DeviceCommand::release_device() {
  
  ::InternalProtocol::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InternalProtocol::Device* DeviceCommand::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:InternalProtocol.DeviceCommand.device)
  
  ::InternalProtocol::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::InternalProtocol::Device* DeviceCommand::_internal_mutable_device() {
  
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::InternalProtocol::Device>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::InternalProtocol::Device* DeviceCommand::mutable_device() {
  ::InternalProtocol::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.DeviceCommand.device)
  return _msg;
}
inline void DeviceCommand::set_allocated_device(::InternalProtocol::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.DeviceCommand.device)
}

// bytes commandData = 2;
inline void DeviceCommand::clear_commanddata() {
  _impl_.commanddata_.ClearToEmpty();
}
inline const std::string& DeviceCommand::commanddata() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceCommand.commandData)
  return _internal_commanddata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceCommand::set_commanddata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.commanddata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InternalProtocol.DeviceCommand.commandData)
}
inline std::string* DeviceCommand::mutable_commanddata() {
  std::string* _s = _internal_mutable_commanddata();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.DeviceCommand.commandData)
  return _s;
}
inline const std::string& DeviceCommand::_internal_commanddata() const {
  return _impl_.commanddata_.Get();
}
inline void DeviceCommand::_internal_set_commanddata(const std::string& value) {
  
  _impl_.commanddata_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceCommand::_internal_mutable_commanddata() {
  
  return _impl_.commanddata_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceCommand::release_commanddata() {
  // @@protoc_insertion_point(field_release:InternalProtocol.DeviceCommand.commandData)
  return _impl_.commanddata_.Release();
}
inline void DeviceCommand::set_allocated_commanddata(std::string* commanddata) {
  if (commanddata != nullptr) {
    
  } else {
    
  }
  _impl_.commanddata_.SetAllocated(commanddata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commanddata_.IsDefault()) {
    _impl_.commanddata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.DeviceCommand.commandData)
}

// -------------------------------------------------------------------

// Device

// .InternalProtocol.Device.Module module = 1;
inline void Device::clear_module() {
  _impl_.module_ = 0;
}
inline ::InternalProtocol::Device_Module Device::_internal_module() const {
  return static_cast< ::InternalProtocol::Device_Module >(_impl_.module_);
}
inline ::InternalProtocol::Device_Module Device::module() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.Device.module)
  return _internal_module();
}
inline void Device::_internal_set_module(::InternalProtocol::Device_Module value) {
  
  _impl_.module_ = value;
}
inline void Device::set_module(::InternalProtocol::Device_Module value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.Device.module)
}

// uint32 deviceType = 2;
inline void Device::clear_devicetype() {
  _impl_.devicetype_ = 0u;
}
inline uint32_t Device::_internal_devicetype() const {
  return _impl_.devicetype_;
}
inline uint32_t Device::devicetype() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.Device.deviceType)
  return _internal_devicetype();
}
inline void Device::_internal_set_devicetype(uint32_t value) {
  
  _impl_.devicetype_ = value;
}
inline void Device::set_devicetype(uint32_t value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.Device.deviceType)
}

// string deviceRole = 3;
inline void Device::clear_devicerole() {
  _impl_.devicerole_.ClearToEmpty();
}
inline const std::string& Device::devicerole() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.Device.deviceRole)
  return _internal_devicerole();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_devicerole(ArgT0&& arg0, ArgT... args) {
 
 _impl_.devicerole_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InternalProtocol.Device.deviceRole)
}
inline std::string* Device::mutable_devicerole() {
  std::string* _s = _internal_mutable_devicerole();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.Device.deviceRole)
  return _s;
}
inline const std::string& Device::_internal_devicerole() const {
  return _impl_.devicerole_.Get();
}
inline void Device::_internal_set_devicerole(const std::string& value) {
  
  _impl_.devicerole_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_devicerole() {
  
  return _impl_.devicerole_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_devicerole() {
  // @@protoc_insertion_point(field_release:InternalProtocol.Device.deviceRole)
  return _impl_.devicerole_.Release();
}
inline void Device::set_allocated_devicerole(std::string* devicerole) {
  if (devicerole != nullptr) {
    
  } else {
    
  }
  _impl_.devicerole_.SetAllocated(devicerole, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicerole_.IsDefault()) {
    _impl_.devicerole_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.Device.deviceRole)
}

// string deviceName = 4;
inline void Device::clear_devicename() {
  _impl_.devicename_.ClearToEmpty();
}
inline const std::string& Device::devicename() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.Device.deviceName)
  return _internal_devicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_devicename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.devicename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InternalProtocol.Device.deviceName)
}
inline std::string* Device::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.Device.deviceName)
  return _s;
}
inline const std::string& Device::_internal_devicename() const {
  return _impl_.devicename_.Get();
}
inline void Device::_internal_set_devicename(const std::string& value) {
  
  _impl_.devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_devicename() {
  
  return _impl_.devicename_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_devicename() {
  // @@protoc_insertion_point(field_release:InternalProtocol.Device.deviceName)
  return _impl_.devicename_.Release();
}
inline void Device::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  _impl_.devicename_.SetAllocated(devicename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicename_.IsDefault()) {
    _impl_.devicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.Device.deviceName)
}

// uint32 priority = 5;
inline void Device::clear_priority() {
  _impl_.priority_ = 0u;
}
inline uint32_t Device::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t Device::priority() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.Device.priority)
  return _internal_priority();
}
inline void Device::_internal_set_priority(uint32_t value) {
  
  _impl_.priority_ = value;
}
inline void Device::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.Device.priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InternalProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::InternalProtocol::DeviceConnectResponse_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InternalProtocol::DeviceConnectResponse_ResponseType>() {
  return ::InternalProtocol::DeviceConnectResponse_ResponseType_descriptor();
}
template <> struct is_proto_enum< ::InternalProtocol::Device_Module> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InternalProtocol::Device_Module>() {
  return ::InternalProtocol::Device_Module_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto
