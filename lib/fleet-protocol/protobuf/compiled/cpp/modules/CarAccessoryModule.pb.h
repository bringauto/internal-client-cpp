// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/CarAccessoryModule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fCarAccessoryModule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fCarAccessoryModule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fCarAccessoryModule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fCarAccessoryModule_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fCarAccessoryModule_2eproto;
namespace CarAccessoryModule {
class ButtonCommand;
struct ButtonCommandDefaultTypeInternal;
extern ButtonCommandDefaultTypeInternal _ButtonCommand_default_instance_;
class ButtonError;
struct ButtonErrorDefaultTypeInternal;
extern ButtonErrorDefaultTypeInternal _ButtonError_default_instance_;
class ButtonStatus;
struct ButtonStatusDefaultTypeInternal;
extern ButtonStatusDefaultTypeInternal _ButtonStatus_default_instance_;
}  // namespace CarAccessoryModule
PROTOBUF_NAMESPACE_OPEN
template<> ::CarAccessoryModule::ButtonCommand* Arena::CreateMaybeMessage<::CarAccessoryModule::ButtonCommand>(Arena*);
template<> ::CarAccessoryModule::ButtonError* Arena::CreateMaybeMessage<::CarAccessoryModule::ButtonError>(Arena*);
template<> ::CarAccessoryModule::ButtonStatus* Arena::CreateMaybeMessage<::CarAccessoryModule::ButtonStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CarAccessoryModule {

enum ButtonCommand_Command : int {
  ButtonCommand_Command_PRESS = 0,
  ButtonCommand_Command_ButtonCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ButtonCommand_Command_ButtonCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ButtonCommand_Command_IsValid(int value);
constexpr ButtonCommand_Command ButtonCommand_Command_Command_MIN = ButtonCommand_Command_PRESS;
constexpr ButtonCommand_Command ButtonCommand_Command_Command_MAX = ButtonCommand_Command_PRESS;
constexpr int ButtonCommand_Command_Command_ARRAYSIZE = ButtonCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonCommand_Command_descriptor();
template<typename T>
inline const std::string& ButtonCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ButtonCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ButtonCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ButtonCommand_Command_descriptor(), enum_t_value);
}
inline bool ButtonCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ButtonCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ButtonCommand_Command>(
    ButtonCommand_Command_descriptor(), name, value);
}
// ===================================================================

class ButtonStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CarAccessoryModule.ButtonStatus) */ {
 public:
  inline ButtonStatus() : ButtonStatus(nullptr) {}
  ~ButtonStatus() override;
  explicit PROTOBUF_CONSTEXPR ButtonStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtonStatus(const ButtonStatus& from);
  ButtonStatus(ButtonStatus&& from) noexcept
    : ButtonStatus() {
    *this = ::std::move(from);
  }

  inline ButtonStatus& operator=(const ButtonStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonStatus& operator=(ButtonStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtonStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtonStatus* internal_default_instance() {
    return reinterpret_cast<const ButtonStatus*>(
               &_ButtonStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ButtonStatus& a, ButtonStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtonStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ButtonStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ButtonStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ButtonStatus& from) {
    ButtonStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CarAccessoryModule.ButtonStatus";
  }
  protected:
  explicit ButtonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsPressedFieldNumber = 1,
  };
  // bool isPressed = 1;
  void clear_ispressed();
  bool ispressed() const;
  void set_ispressed(bool value);
  private:
  bool _internal_ispressed() const;
  void _internal_set_ispressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CarAccessoryModule.ButtonStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ispressed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fCarAccessoryModule_2eproto;
};
// -------------------------------------------------------------------

class ButtonCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CarAccessoryModule.ButtonCommand) */ {
 public:
  inline ButtonCommand() : ButtonCommand(nullptr) {}
  ~ButtonCommand() override;
  explicit PROTOBUF_CONSTEXPR ButtonCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtonCommand(const ButtonCommand& from);
  ButtonCommand(ButtonCommand&& from) noexcept
    : ButtonCommand() {
    *this = ::std::move(from);
  }

  inline ButtonCommand& operator=(const ButtonCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonCommand& operator=(ButtonCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtonCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtonCommand* internal_default_instance() {
    return reinterpret_cast<const ButtonCommand*>(
               &_ButtonCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ButtonCommand& a, ButtonCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtonCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ButtonCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ButtonCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ButtonCommand& from) {
    ButtonCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CarAccessoryModule.ButtonCommand";
  }
  protected:
  explicit ButtonCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ButtonCommand_Command Command;
  static constexpr Command PRESS =
    ButtonCommand_Command_PRESS;
  static inline bool Command_IsValid(int value) {
    return ButtonCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    ButtonCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    ButtonCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    ButtonCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return ButtonCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return ButtonCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return ButtonCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .CarAccessoryModule.ButtonCommand.Command command = 1;
  void clear_command();
  ::CarAccessoryModule::ButtonCommand_Command command() const;
  void set_command(::CarAccessoryModule::ButtonCommand_Command value);
  private:
  ::CarAccessoryModule::ButtonCommand_Command _internal_command() const;
  void _internal_set_command(::CarAccessoryModule::ButtonCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:CarAccessoryModule.ButtonCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fCarAccessoryModule_2eproto;
};
// -------------------------------------------------------------------

class ButtonError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CarAccessoryModule.ButtonError) */ {
 public:
  inline ButtonError() : ButtonError(nullptr) {}
  ~ButtonError() override;
  explicit PROTOBUF_CONSTEXPR ButtonError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtonError(const ButtonError& from);
  ButtonError(ButtonError&& from) noexcept
    : ButtonError() {
    *this = ::std::move(from);
  }

  inline ButtonError& operator=(const ButtonError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonError& operator=(ButtonError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtonError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtonError* internal_default_instance() {
    return reinterpret_cast<const ButtonError*>(
               &_ButtonError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ButtonError& a, ButtonError& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtonError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ButtonError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ButtonError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ButtonError& from) {
    ButtonError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CarAccessoryModule.ButtonError";
  }
  protected:
  explicit ButtonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPressCountFieldNumber = 1,
  };
  // uint32 pressCount = 1;
  void clear_presscount();
  uint32_t presscount() const;
  void set_presscount(uint32_t value);
  private:
  uint32_t _internal_presscount() const;
  void _internal_set_presscount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CarAccessoryModule.ButtonError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t presscount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fCarAccessoryModule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ButtonStatus

// bool isPressed = 1;
inline void ButtonStatus::clear_ispressed() {
  _impl_.ispressed_ = false;
}
inline bool ButtonStatus::_internal_ispressed() const {
  return _impl_.ispressed_;
}
inline bool ButtonStatus::ispressed() const {
  // @@protoc_insertion_point(field_get:CarAccessoryModule.ButtonStatus.isPressed)
  return _internal_ispressed();
}
inline void ButtonStatus::_internal_set_ispressed(bool value) {
  
  _impl_.ispressed_ = value;
}
inline void ButtonStatus::set_ispressed(bool value) {
  _internal_set_ispressed(value);
  // @@protoc_insertion_point(field_set:CarAccessoryModule.ButtonStatus.isPressed)
}

// -------------------------------------------------------------------

// ButtonCommand

// .CarAccessoryModule.ButtonCommand.Command command = 1;
inline void ButtonCommand::clear_command() {
  _impl_.command_ = 0;
}
inline ::CarAccessoryModule::ButtonCommand_Command ButtonCommand::_internal_command() const {
  return static_cast< ::CarAccessoryModule::ButtonCommand_Command >(_impl_.command_);
}
inline ::CarAccessoryModule::ButtonCommand_Command ButtonCommand::command() const {
  // @@protoc_insertion_point(field_get:CarAccessoryModule.ButtonCommand.command)
  return _internal_command();
}
inline void ButtonCommand::_internal_set_command(::CarAccessoryModule::ButtonCommand_Command value) {
  
  _impl_.command_ = value;
}
inline void ButtonCommand::set_command(::CarAccessoryModule::ButtonCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:CarAccessoryModule.ButtonCommand.command)
}

// -------------------------------------------------------------------

// ButtonError

// uint32 pressCount = 1;
inline void ButtonError::clear_presscount() {
  _impl_.presscount_ = 0u;
}
inline uint32_t ButtonError::_internal_presscount() const {
  return _impl_.presscount_;
}
inline uint32_t ButtonError::presscount() const {
  // @@protoc_insertion_point(field_get:CarAccessoryModule.ButtonError.pressCount)
  return _internal_presscount();
}
inline void ButtonError::_internal_set_presscount(uint32_t value) {
  
  _impl_.presscount_ = value;
}
inline void ButtonError::set_presscount(uint32_t value) {
  _internal_set_presscount(value);
  // @@protoc_insertion_point(field_set:CarAccessoryModule.ButtonError.pressCount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CarAccessoryModule

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CarAccessoryModule::ButtonCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CarAccessoryModule::ButtonCommand_Command>() {
  return ::CarAccessoryModule::ButtonCommand_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fCarAccessoryModule_2eproto
