// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ActionModule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fActionModule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fActionModule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fActionModule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fActionModule_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fActionModule_2eproto;
namespace ActionModule {
class GreenButtonCommand;
struct GreenButtonCommandDefaultTypeInternal;
extern GreenButtonCommandDefaultTypeInternal _GreenButtonCommand_default_instance_;
class GreenButtonError;
struct GreenButtonErrorDefaultTypeInternal;
extern GreenButtonErrorDefaultTypeInternal _GreenButtonError_default_instance_;
class GreenButtonStatus;
struct GreenButtonStatusDefaultTypeInternal;
extern GreenButtonStatusDefaultTypeInternal _GreenButtonStatus_default_instance_;
class RedButtonCommand;
struct RedButtonCommandDefaultTypeInternal;
extern RedButtonCommandDefaultTypeInternal _RedButtonCommand_default_instance_;
class RedButtonError;
struct RedButtonErrorDefaultTypeInternal;
extern RedButtonErrorDefaultTypeInternal _RedButtonError_default_instance_;
class RedButtonStatus;
struct RedButtonStatusDefaultTypeInternal;
extern RedButtonStatusDefaultTypeInternal _RedButtonStatus_default_instance_;
class SystemLoggerCommand;
struct SystemLoggerCommandDefaultTypeInternal;
extern SystemLoggerCommandDefaultTypeInternal _SystemLoggerCommand_default_instance_;
class SystemLoggerError;
struct SystemLoggerErrorDefaultTypeInternal;
extern SystemLoggerErrorDefaultTypeInternal _SystemLoggerError_default_instance_;
class SystemLoggerStatus;
struct SystemLoggerStatusDefaultTypeInternal;
extern SystemLoggerStatusDefaultTypeInternal _SystemLoggerStatus_default_instance_;
class WatchdogCommand;
struct WatchdogCommandDefaultTypeInternal;
extern WatchdogCommandDefaultTypeInternal _WatchdogCommand_default_instance_;
class WatchdogError;
struct WatchdogErrorDefaultTypeInternal;
extern WatchdogErrorDefaultTypeInternal _WatchdogError_default_instance_;
class WatchdogStatus;
struct WatchdogStatusDefaultTypeInternal;
extern WatchdogStatusDefaultTypeInternal _WatchdogStatus_default_instance_;
}  // namespace ActionModule
PROTOBUF_NAMESPACE_OPEN
template<> ::ActionModule::GreenButtonCommand* Arena::CreateMaybeMessage<::ActionModule::GreenButtonCommand>(Arena*);
template<> ::ActionModule::GreenButtonError* Arena::CreateMaybeMessage<::ActionModule::GreenButtonError>(Arena*);
template<> ::ActionModule::GreenButtonStatus* Arena::CreateMaybeMessage<::ActionModule::GreenButtonStatus>(Arena*);
template<> ::ActionModule::RedButtonCommand* Arena::CreateMaybeMessage<::ActionModule::RedButtonCommand>(Arena*);
template<> ::ActionModule::RedButtonError* Arena::CreateMaybeMessage<::ActionModule::RedButtonError>(Arena*);
template<> ::ActionModule::RedButtonStatus* Arena::CreateMaybeMessage<::ActionModule::RedButtonStatus>(Arena*);
template<> ::ActionModule::SystemLoggerCommand* Arena::CreateMaybeMessage<::ActionModule::SystemLoggerCommand>(Arena*);
template<> ::ActionModule::SystemLoggerError* Arena::CreateMaybeMessage<::ActionModule::SystemLoggerError>(Arena*);
template<> ::ActionModule::SystemLoggerStatus* Arena::CreateMaybeMessage<::ActionModule::SystemLoggerStatus>(Arena*);
template<> ::ActionModule::WatchdogCommand* Arena::CreateMaybeMessage<::ActionModule::WatchdogCommand>(Arena*);
template<> ::ActionModule::WatchdogError* Arena::CreateMaybeMessage<::ActionModule::WatchdogError>(Arena*);
template<> ::ActionModule::WatchdogStatus* Arena::CreateMaybeMessage<::ActionModule::WatchdogStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ActionModule {

enum SystemLoggerStatus_Verbosity : int {
  SystemLoggerStatus_Verbosity_DEBUG = 0,
  SystemLoggerStatus_Verbosity_INFO = 5,
  SystemLoggerStatus_Verbosity_WARNING = 10,
  SystemLoggerStatus_Verbosity_ERROR = 15,
  SystemLoggerStatus_Verbosity_SystemLoggerStatus_Verbosity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SystemLoggerStatus_Verbosity_SystemLoggerStatus_Verbosity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SystemLoggerStatus_Verbosity_IsValid(int value);
constexpr SystemLoggerStatus_Verbosity SystemLoggerStatus_Verbosity_Verbosity_MIN = SystemLoggerStatus_Verbosity_DEBUG;
constexpr SystemLoggerStatus_Verbosity SystemLoggerStatus_Verbosity_Verbosity_MAX = SystemLoggerStatus_Verbosity_ERROR;
constexpr int SystemLoggerStatus_Verbosity_Verbosity_ARRAYSIZE = SystemLoggerStatus_Verbosity_Verbosity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemLoggerStatus_Verbosity_descriptor();
template<typename T>
inline const std::string& SystemLoggerStatus_Verbosity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemLoggerStatus_Verbosity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemLoggerStatus_Verbosity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemLoggerStatus_Verbosity_descriptor(), enum_t_value);
}
inline bool SystemLoggerStatus_Verbosity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SystemLoggerStatus_Verbosity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemLoggerStatus_Verbosity>(
    SystemLoggerStatus_Verbosity_descriptor(), name, value);
}
enum SystemLoggerCommand_Command : int {
  SystemLoggerCommand_Command_LOG = 0,
  SystemLoggerCommand_Command_SystemLoggerCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SystemLoggerCommand_Command_SystemLoggerCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SystemLoggerCommand_Command_IsValid(int value);
constexpr SystemLoggerCommand_Command SystemLoggerCommand_Command_Command_MIN = SystemLoggerCommand_Command_LOG;
constexpr SystemLoggerCommand_Command SystemLoggerCommand_Command_Command_MAX = SystemLoggerCommand_Command_LOG;
constexpr int SystemLoggerCommand_Command_Command_ARRAYSIZE = SystemLoggerCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemLoggerCommand_Command_descriptor();
template<typename T>
inline const std::string& SystemLoggerCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemLoggerCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemLoggerCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemLoggerCommand_Command_descriptor(), enum_t_value);
}
inline bool SystemLoggerCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SystemLoggerCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemLoggerCommand_Command>(
    SystemLoggerCommand_Command_descriptor(), name, value);
}
enum GreenButtonCommand_Command : int {
  GreenButtonCommand_Command_PRESS = 0,
  GreenButtonCommand_Command_GreenButtonCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GreenButtonCommand_Command_GreenButtonCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GreenButtonCommand_Command_IsValid(int value);
constexpr GreenButtonCommand_Command GreenButtonCommand_Command_Command_MIN = GreenButtonCommand_Command_PRESS;
constexpr GreenButtonCommand_Command GreenButtonCommand_Command_Command_MAX = GreenButtonCommand_Command_PRESS;
constexpr int GreenButtonCommand_Command_Command_ARRAYSIZE = GreenButtonCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GreenButtonCommand_Command_descriptor();
template<typename T>
inline const std::string& GreenButtonCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GreenButtonCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GreenButtonCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GreenButtonCommand_Command_descriptor(), enum_t_value);
}
inline bool GreenButtonCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GreenButtonCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GreenButtonCommand_Command>(
    GreenButtonCommand_Command_descriptor(), name, value);
}
enum RedButtonCommand_Command : int {
  RedButtonCommand_Command_PRESS = 0,
  RedButtonCommand_Command_RedButtonCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RedButtonCommand_Command_RedButtonCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RedButtonCommand_Command_IsValid(int value);
constexpr RedButtonCommand_Command RedButtonCommand_Command_Command_MIN = RedButtonCommand_Command_PRESS;
constexpr RedButtonCommand_Command RedButtonCommand_Command_Command_MAX = RedButtonCommand_Command_PRESS;
constexpr int RedButtonCommand_Command_Command_ARRAYSIZE = RedButtonCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedButtonCommand_Command_descriptor();
template<typename T>
inline const std::string& RedButtonCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RedButtonCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RedButtonCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RedButtonCommand_Command_descriptor(), enum_t_value);
}
inline bool RedButtonCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RedButtonCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RedButtonCommand_Command>(
    RedButtonCommand_Command_descriptor(), name, value);
}
enum WatchdogCommand_Command : int {
  WatchdogCommand_Command_RESET = 0,
  WatchdogCommand_Command_WatchdogCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WatchdogCommand_Command_WatchdogCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WatchdogCommand_Command_IsValid(int value);
constexpr WatchdogCommand_Command WatchdogCommand_Command_Command_MIN = WatchdogCommand_Command_RESET;
constexpr WatchdogCommand_Command WatchdogCommand_Command_Command_MAX = WatchdogCommand_Command_RESET;
constexpr int WatchdogCommand_Command_Command_ARRAYSIZE = WatchdogCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchdogCommand_Command_descriptor();
template<typename T>
inline const std::string& WatchdogCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WatchdogCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WatchdogCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WatchdogCommand_Command_descriptor(), enum_t_value);
}
inline bool WatchdogCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WatchdogCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WatchdogCommand_Command>(
    WatchdogCommand_Command_descriptor(), name, value);
}
// ===================================================================

class SystemLoggerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.SystemLoggerStatus) */ {
 public:
  inline SystemLoggerStatus() : SystemLoggerStatus(nullptr) {}
  ~SystemLoggerStatus() override;
  explicit PROTOBUF_CONSTEXPR SystemLoggerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemLoggerStatus(const SystemLoggerStatus& from);
  SystemLoggerStatus(SystemLoggerStatus&& from) noexcept
    : SystemLoggerStatus() {
    *this = ::std::move(from);
  }

  inline SystemLoggerStatus& operator=(const SystemLoggerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemLoggerStatus& operator=(SystemLoggerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemLoggerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemLoggerStatus* internal_default_instance() {
    return reinterpret_cast<const SystemLoggerStatus*>(
               &_SystemLoggerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemLoggerStatus& a, SystemLoggerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemLoggerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemLoggerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemLoggerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemLoggerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemLoggerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemLoggerStatus& from) {
    SystemLoggerStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemLoggerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.SystemLoggerStatus";
  }
  protected:
  explicit SystemLoggerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SystemLoggerStatus_Verbosity Verbosity;
  static constexpr Verbosity DEBUG =
    SystemLoggerStatus_Verbosity_DEBUG;
  static constexpr Verbosity INFO =
    SystemLoggerStatus_Verbosity_INFO;
  static constexpr Verbosity WARNING =
    SystemLoggerStatus_Verbosity_WARNING;
  static constexpr Verbosity ERROR =
    SystemLoggerStatus_Verbosity_ERROR;
  static inline bool Verbosity_IsValid(int value) {
    return SystemLoggerStatus_Verbosity_IsValid(value);
  }
  static constexpr Verbosity Verbosity_MIN =
    SystemLoggerStatus_Verbosity_Verbosity_MIN;
  static constexpr Verbosity Verbosity_MAX =
    SystemLoggerStatus_Verbosity_Verbosity_MAX;
  static constexpr int Verbosity_ARRAYSIZE =
    SystemLoggerStatus_Verbosity_Verbosity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Verbosity_descriptor() {
    return SystemLoggerStatus_Verbosity_descriptor();
  }
  template<typename T>
  static inline const std::string& Verbosity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Verbosity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Verbosity_Name.");
    return SystemLoggerStatus_Verbosity_Name(enum_t_value);
  }
  static inline bool Verbosity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Verbosity* value) {
    return SystemLoggerStatus_Verbosity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 2,
    kSourceDeviceFieldNumber = 1,
    kVerbosityFieldNumber = 3,
  };
  // repeated string logs = 2;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  const std::string& logs(int index) const;
  std::string* mutable_logs(int index);
  void set_logs(int index, const std::string& value);
  void set_logs(int index, std::string&& value);
  void set_logs(int index, const char* value);
  void set_logs(int index, const char* value, size_t size);
  std::string* add_logs();
  void add_logs(const std::string& value);
  void add_logs(std::string&& value);
  void add_logs(const char* value);
  void add_logs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logs();
  private:
  const std::string& _internal_logs(int index) const;
  std::string* _internal_add_logs();
  public:

  // string sourceDevice = 1;
  void clear_sourcedevice();
  const std::string& sourcedevice() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourcedevice(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourcedevice();
  PROTOBUF_NODISCARD std::string* release_sourcedevice();
  void set_allocated_sourcedevice(std::string* sourcedevice);
  private:
  const std::string& _internal_sourcedevice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourcedevice(const std::string& value);
  std::string* _internal_mutable_sourcedevice();
  public:

  // .ActionModule.SystemLoggerStatus.Verbosity verbosity = 3;
  void clear_verbosity();
  ::ActionModule::SystemLoggerStatus_Verbosity verbosity() const;
  void set_verbosity(::ActionModule::SystemLoggerStatus_Verbosity value);
  private:
  ::ActionModule::SystemLoggerStatus_Verbosity _internal_verbosity() const;
  void _internal_set_verbosity(::ActionModule::SystemLoggerStatus_Verbosity value);
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.SystemLoggerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcedevice_;
    int verbosity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class GreenButtonStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.GreenButtonStatus) */ {
 public:
  inline GreenButtonStatus() : GreenButtonStatus(nullptr) {}
  ~GreenButtonStatus() override;
  explicit PROTOBUF_CONSTEXPR GreenButtonStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GreenButtonStatus(const GreenButtonStatus& from);
  GreenButtonStatus(GreenButtonStatus&& from) noexcept
    : GreenButtonStatus() {
    *this = ::std::move(from);
  }

  inline GreenButtonStatus& operator=(const GreenButtonStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GreenButtonStatus& operator=(GreenButtonStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GreenButtonStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const GreenButtonStatus* internal_default_instance() {
    return reinterpret_cast<const GreenButtonStatus*>(
               &_GreenButtonStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GreenButtonStatus& a, GreenButtonStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GreenButtonStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GreenButtonStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GreenButtonStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GreenButtonStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GreenButtonStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GreenButtonStatus& from) {
    GreenButtonStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GreenButtonStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.GreenButtonStatus";
  }
  protected:
  explicit GreenButtonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsPressedFieldNumber = 1,
    kIsAliveFieldNumber = 2,
  };
  // bool isPressed = 1;
  void clear_ispressed();
  bool ispressed() const;
  void set_ispressed(bool value);
  private:
  bool _internal_ispressed() const;
  void _internal_set_ispressed(bool value);
  public:

  // bool isAlive = 2;
  void clear_isalive();
  bool isalive() const;
  void set_isalive(bool value);
  private:
  bool _internal_isalive() const;
  void _internal_set_isalive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.GreenButtonStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ispressed_;
    bool isalive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class RedButtonStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.RedButtonStatus) */ {
 public:
  inline RedButtonStatus() : RedButtonStatus(nullptr) {}
  ~RedButtonStatus() override;
  explicit PROTOBUF_CONSTEXPR RedButtonStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedButtonStatus(const RedButtonStatus& from);
  RedButtonStatus(RedButtonStatus&& from) noexcept
    : RedButtonStatus() {
    *this = ::std::move(from);
  }

  inline RedButtonStatus& operator=(const RedButtonStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedButtonStatus& operator=(RedButtonStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedButtonStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedButtonStatus* internal_default_instance() {
    return reinterpret_cast<const RedButtonStatus*>(
               &_RedButtonStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RedButtonStatus& a, RedButtonStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RedButtonStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedButtonStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedButtonStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedButtonStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RedButtonStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RedButtonStatus& from) {
    RedButtonStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedButtonStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.RedButtonStatus";
  }
  protected:
  explicit RedButtonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsPressedFieldNumber = 1,
  };
  // bool isPressed = 1;
  void clear_ispressed();
  bool ispressed() const;
  void set_ispressed(bool value);
  private:
  bool _internal_ispressed() const;
  void _internal_set_ispressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.RedButtonStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ispressed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class WatchdogStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.WatchdogStatus) */ {
 public:
  inline WatchdogStatus() : WatchdogStatus(nullptr) {}
  ~WatchdogStatus() override;
  explicit PROTOBUF_CONSTEXPR WatchdogStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchdogStatus(const WatchdogStatus& from);
  WatchdogStatus(WatchdogStatus&& from) noexcept
    : WatchdogStatus() {
    *this = ::std::move(from);
  }

  inline WatchdogStatus& operator=(const WatchdogStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogStatus& operator=(WatchdogStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogStatus* internal_default_instance() {
    return reinterpret_cast<const WatchdogStatus*>(
               &_WatchdogStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WatchdogStatus& a, WatchdogStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchdogStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchdogStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchdogStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchdogStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatchdogStatus& from) {
    WatchdogStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchdogStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.WatchdogStatus";
  }
  protected:
  explicit WatchdogStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kIsAliveFieldNumber = 1,
  };
  // string state = 2;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // bool isAlive = 1;
  void clear_isalive();
  bool isalive() const;
  void set_isalive(bool value);
  private:
  bool _internal_isalive() const;
  void _internal_set_isalive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.WatchdogStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    bool isalive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class SystemLoggerCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.SystemLoggerCommand) */ {
 public:
  inline SystemLoggerCommand() : SystemLoggerCommand(nullptr) {}
  ~SystemLoggerCommand() override;
  explicit PROTOBUF_CONSTEXPR SystemLoggerCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemLoggerCommand(const SystemLoggerCommand& from);
  SystemLoggerCommand(SystemLoggerCommand&& from) noexcept
    : SystemLoggerCommand() {
    *this = ::std::move(from);
  }

  inline SystemLoggerCommand& operator=(const SystemLoggerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemLoggerCommand& operator=(SystemLoggerCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemLoggerCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemLoggerCommand* internal_default_instance() {
    return reinterpret_cast<const SystemLoggerCommand*>(
               &_SystemLoggerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemLoggerCommand& a, SystemLoggerCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemLoggerCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemLoggerCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemLoggerCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemLoggerCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemLoggerCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemLoggerCommand& from) {
    SystemLoggerCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemLoggerCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.SystemLoggerCommand";
  }
  protected:
  explicit SystemLoggerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SystemLoggerCommand_Command Command;
  static constexpr Command LOG =
    SystemLoggerCommand_Command_LOG;
  static inline bool Command_IsValid(int value) {
    return SystemLoggerCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    SystemLoggerCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    SystemLoggerCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    SystemLoggerCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return SystemLoggerCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return SystemLoggerCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return SystemLoggerCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .ActionModule.SystemLoggerCommand.Command command = 1;
  void clear_command();
  ::ActionModule::SystemLoggerCommand_Command command() const;
  void set_command(::ActionModule::SystemLoggerCommand_Command value);
  private:
  ::ActionModule::SystemLoggerCommand_Command _internal_command() const;
  void _internal_set_command(::ActionModule::SystemLoggerCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.SystemLoggerCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class GreenButtonCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.GreenButtonCommand) */ {
 public:
  inline GreenButtonCommand() : GreenButtonCommand(nullptr) {}
  ~GreenButtonCommand() override;
  explicit PROTOBUF_CONSTEXPR GreenButtonCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GreenButtonCommand(const GreenButtonCommand& from);
  GreenButtonCommand(GreenButtonCommand&& from) noexcept
    : GreenButtonCommand() {
    *this = ::std::move(from);
  }

  inline GreenButtonCommand& operator=(const GreenButtonCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GreenButtonCommand& operator=(GreenButtonCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GreenButtonCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const GreenButtonCommand* internal_default_instance() {
    return reinterpret_cast<const GreenButtonCommand*>(
               &_GreenButtonCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GreenButtonCommand& a, GreenButtonCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GreenButtonCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GreenButtonCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GreenButtonCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GreenButtonCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GreenButtonCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GreenButtonCommand& from) {
    GreenButtonCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GreenButtonCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.GreenButtonCommand";
  }
  protected:
  explicit GreenButtonCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GreenButtonCommand_Command Command;
  static constexpr Command PRESS =
    GreenButtonCommand_Command_PRESS;
  static inline bool Command_IsValid(int value) {
    return GreenButtonCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    GreenButtonCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    GreenButtonCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    GreenButtonCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return GreenButtonCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return GreenButtonCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return GreenButtonCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .ActionModule.GreenButtonCommand.Command command = 1;
  void clear_command();
  ::ActionModule::GreenButtonCommand_Command command() const;
  void set_command(::ActionModule::GreenButtonCommand_Command value);
  private:
  ::ActionModule::GreenButtonCommand_Command _internal_command() const;
  void _internal_set_command(::ActionModule::GreenButtonCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.GreenButtonCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class RedButtonCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.RedButtonCommand) */ {
 public:
  inline RedButtonCommand() : RedButtonCommand(nullptr) {}
  ~RedButtonCommand() override;
  explicit PROTOBUF_CONSTEXPR RedButtonCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedButtonCommand(const RedButtonCommand& from);
  RedButtonCommand(RedButtonCommand&& from) noexcept
    : RedButtonCommand() {
    *this = ::std::move(from);
  }

  inline RedButtonCommand& operator=(const RedButtonCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedButtonCommand& operator=(RedButtonCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedButtonCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedButtonCommand* internal_default_instance() {
    return reinterpret_cast<const RedButtonCommand*>(
               &_RedButtonCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RedButtonCommand& a, RedButtonCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RedButtonCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedButtonCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedButtonCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedButtonCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RedButtonCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RedButtonCommand& from) {
    RedButtonCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedButtonCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.RedButtonCommand";
  }
  protected:
  explicit RedButtonCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RedButtonCommand_Command Command;
  static constexpr Command PRESS =
    RedButtonCommand_Command_PRESS;
  static inline bool Command_IsValid(int value) {
    return RedButtonCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    RedButtonCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    RedButtonCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    RedButtonCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return RedButtonCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return RedButtonCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return RedButtonCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .ActionModule.RedButtonCommand.Command command = 1;
  void clear_command();
  ::ActionModule::RedButtonCommand_Command command() const;
  void set_command(::ActionModule::RedButtonCommand_Command value);
  private:
  ::ActionModule::RedButtonCommand_Command _internal_command() const;
  void _internal_set_command(::ActionModule::RedButtonCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.RedButtonCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class WatchdogCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.WatchdogCommand) */ {
 public:
  inline WatchdogCommand() : WatchdogCommand(nullptr) {}
  ~WatchdogCommand() override;
  explicit PROTOBUF_CONSTEXPR WatchdogCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchdogCommand(const WatchdogCommand& from);
  WatchdogCommand(WatchdogCommand&& from) noexcept
    : WatchdogCommand() {
    *this = ::std::move(from);
  }

  inline WatchdogCommand& operator=(const WatchdogCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogCommand& operator=(WatchdogCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogCommand* internal_default_instance() {
    return reinterpret_cast<const WatchdogCommand*>(
               &_WatchdogCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WatchdogCommand& a, WatchdogCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchdogCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchdogCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchdogCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchdogCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatchdogCommand& from) {
    WatchdogCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchdogCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.WatchdogCommand";
  }
  protected:
  explicit WatchdogCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WatchdogCommand_Command Command;
  static constexpr Command RESET =
    WatchdogCommand_Command_RESET;
  static inline bool Command_IsValid(int value) {
    return WatchdogCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    WatchdogCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    WatchdogCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    WatchdogCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return WatchdogCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return WatchdogCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return WatchdogCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .ActionModule.WatchdogCommand.Command command = 1;
  void clear_command();
  ::ActionModule::WatchdogCommand_Command command() const;
  void set_command(::ActionModule::WatchdogCommand_Command value);
  private:
  ::ActionModule::WatchdogCommand_Command _internal_command() const;
  void _internal_set_command(::ActionModule::WatchdogCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.WatchdogCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class SystemLoggerError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.SystemLoggerError) */ {
 public:
  inline SystemLoggerError() : SystemLoggerError(nullptr) {}
  ~SystemLoggerError() override;
  explicit PROTOBUF_CONSTEXPR SystemLoggerError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemLoggerError(const SystemLoggerError& from);
  SystemLoggerError(SystemLoggerError&& from) noexcept
    : SystemLoggerError() {
    *this = ::std::move(from);
  }

  inline SystemLoggerError& operator=(const SystemLoggerError& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemLoggerError& operator=(SystemLoggerError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemLoggerError& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemLoggerError* internal_default_instance() {
    return reinterpret_cast<const SystemLoggerError*>(
               &_SystemLoggerError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SystemLoggerError& a, SystemLoggerError& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemLoggerError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemLoggerError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemLoggerError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemLoggerError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemLoggerError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemLoggerError& from) {
    SystemLoggerError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemLoggerError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.SystemLoggerError";
  }
  protected:
  explicit SystemLoggerError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.SystemLoggerError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class GreenButtonError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.GreenButtonError) */ {
 public:
  inline GreenButtonError() : GreenButtonError(nullptr) {}
  ~GreenButtonError() override;
  explicit PROTOBUF_CONSTEXPR GreenButtonError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GreenButtonError(const GreenButtonError& from);
  GreenButtonError(GreenButtonError&& from) noexcept
    : GreenButtonError() {
    *this = ::std::move(from);
  }

  inline GreenButtonError& operator=(const GreenButtonError& from) {
    CopyFrom(from);
    return *this;
  }
  inline GreenButtonError& operator=(GreenButtonError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GreenButtonError& default_instance() {
    return *internal_default_instance();
  }
  static inline const GreenButtonError* internal_default_instance() {
    return reinterpret_cast<const GreenButtonError*>(
               &_GreenButtonError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GreenButtonError& a, GreenButtonError& b) {
    a.Swap(&b);
  }
  inline void Swap(GreenButtonError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GreenButtonError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GreenButtonError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GreenButtonError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GreenButtonError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GreenButtonError& from) {
    GreenButtonError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GreenButtonError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.GreenButtonError";
  }
  protected:
  explicit GreenButtonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.GreenButtonError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class RedButtonError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.RedButtonError) */ {
 public:
  inline RedButtonError() : RedButtonError(nullptr) {}
  ~RedButtonError() override;
  explicit PROTOBUF_CONSTEXPR RedButtonError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedButtonError(const RedButtonError& from);
  RedButtonError(RedButtonError&& from) noexcept
    : RedButtonError() {
    *this = ::std::move(from);
  }

  inline RedButtonError& operator=(const RedButtonError& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedButtonError& operator=(RedButtonError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedButtonError& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedButtonError* internal_default_instance() {
    return reinterpret_cast<const RedButtonError*>(
               &_RedButtonError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RedButtonError& a, RedButtonError& b) {
    a.Swap(&b);
  }
  inline void Swap(RedButtonError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedButtonError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedButtonError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedButtonError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RedButtonError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RedButtonError& from) {
    RedButtonError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedButtonError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.RedButtonError";
  }
  protected:
  explicit RedButtonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.RedButtonError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// -------------------------------------------------------------------

class WatchdogError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActionModule.WatchdogError) */ {
 public:
  inline WatchdogError() : WatchdogError(nullptr) {}
  ~WatchdogError() override;
  explicit PROTOBUF_CONSTEXPR WatchdogError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchdogError(const WatchdogError& from);
  WatchdogError(WatchdogError&& from) noexcept
    : WatchdogError() {
    *this = ::std::move(from);
  }

  inline WatchdogError& operator=(const WatchdogError& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogError& operator=(WatchdogError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogError& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogError* internal_default_instance() {
    return reinterpret_cast<const WatchdogError*>(
               &_WatchdogError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WatchdogError& a, WatchdogError& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchdogError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchdogError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchdogError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchdogError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatchdogError& from) {
    WatchdogError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchdogError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActionModule.WatchdogError";
  }
  protected:
  explicit WatchdogError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:ActionModule.WatchdogError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fActionModule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemLoggerStatus

// string sourceDevice = 1;
inline void SystemLoggerStatus::clear_sourcedevice() {
  _impl_.sourcedevice_.ClearToEmpty();
}
inline const std::string& SystemLoggerStatus::sourcedevice() const {
  // @@protoc_insertion_point(field_get:ActionModule.SystemLoggerStatus.sourceDevice)
  return _internal_sourcedevice();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemLoggerStatus::set_sourcedevice(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sourcedevice_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ActionModule.SystemLoggerStatus.sourceDevice)
}
inline std::string* SystemLoggerStatus::mutable_sourcedevice() {
  std::string* _s = _internal_mutable_sourcedevice();
  // @@protoc_insertion_point(field_mutable:ActionModule.SystemLoggerStatus.sourceDevice)
  return _s;
}
inline const std::string& SystemLoggerStatus::_internal_sourcedevice() const {
  return _impl_.sourcedevice_.Get();
}
inline void SystemLoggerStatus::_internal_set_sourcedevice(const std::string& value) {
  
  _impl_.sourcedevice_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemLoggerStatus::_internal_mutable_sourcedevice() {
  
  return _impl_.sourcedevice_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemLoggerStatus::release_sourcedevice() {
  // @@protoc_insertion_point(field_release:ActionModule.SystemLoggerStatus.sourceDevice)
  return _impl_.sourcedevice_.Release();
}
inline void SystemLoggerStatus::set_allocated_sourcedevice(std::string* sourcedevice) {
  if (sourcedevice != nullptr) {
    
  } else {
    
  }
  _impl_.sourcedevice_.SetAllocated(sourcedevice, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sourcedevice_.IsDefault()) {
    _impl_.sourcedevice_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ActionModule.SystemLoggerStatus.sourceDevice)
}

// repeated string logs = 2;
inline int SystemLoggerStatus::_internal_logs_size() const {
  return _impl_.logs_.size();
}
inline int SystemLoggerStatus::logs_size() const {
  return _internal_logs_size();
}
inline void SystemLoggerStatus::clear_logs() {
  _impl_.logs_.Clear();
}
inline std::string* SystemLoggerStatus::add_logs() {
  std::string* _s = _internal_add_logs();
  // @@protoc_insertion_point(field_add_mutable:ActionModule.SystemLoggerStatus.logs)
  return _s;
}
inline const std::string& SystemLoggerStatus::_internal_logs(int index) const {
  return _impl_.logs_.Get(index);
}
inline const std::string& SystemLoggerStatus::logs(int index) const {
  // @@protoc_insertion_point(field_get:ActionModule.SystemLoggerStatus.logs)
  return _internal_logs(index);
}
inline std::string* SystemLoggerStatus::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:ActionModule.SystemLoggerStatus.logs)
  return _impl_.logs_.Mutable(index);
}
inline void SystemLoggerStatus::set_logs(int index, const std::string& value) {
  _impl_.logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ActionModule.SystemLoggerStatus.logs)
}
inline void SystemLoggerStatus::set_logs(int index, std::string&& value) {
  _impl_.logs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ActionModule.SystemLoggerStatus.logs)
}
inline void SystemLoggerStatus::set_logs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ActionModule.SystemLoggerStatus.logs)
}
inline void SystemLoggerStatus::set_logs(int index, const char* value, size_t size) {
  _impl_.logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActionModule.SystemLoggerStatus.logs)
}
inline std::string* SystemLoggerStatus::_internal_add_logs() {
  return _impl_.logs_.Add();
}
inline void SystemLoggerStatus::add_logs(const std::string& value) {
  _impl_.logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ActionModule.SystemLoggerStatus.logs)
}
inline void SystemLoggerStatus::add_logs(std::string&& value) {
  _impl_.logs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ActionModule.SystemLoggerStatus.logs)
}
inline void SystemLoggerStatus::add_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ActionModule.SystemLoggerStatus.logs)
}
inline void SystemLoggerStatus::add_logs(const char* value, size_t size) {
  _impl_.logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ActionModule.SystemLoggerStatus.logs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SystemLoggerStatus::logs() const {
  // @@protoc_insertion_point(field_list:ActionModule.SystemLoggerStatus.logs)
  return _impl_.logs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SystemLoggerStatus::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:ActionModule.SystemLoggerStatus.logs)
  return &_impl_.logs_;
}

// .ActionModule.SystemLoggerStatus.Verbosity verbosity = 3;
inline void SystemLoggerStatus::clear_verbosity() {
  _impl_.verbosity_ = 0;
}
inline ::ActionModule::SystemLoggerStatus_Verbosity SystemLoggerStatus::_internal_verbosity() const {
  return static_cast< ::ActionModule::SystemLoggerStatus_Verbosity >(_impl_.verbosity_);
}
inline ::ActionModule::SystemLoggerStatus_Verbosity SystemLoggerStatus::verbosity() const {
  // @@protoc_insertion_point(field_get:ActionModule.SystemLoggerStatus.verbosity)
  return _internal_verbosity();
}
inline void SystemLoggerStatus::_internal_set_verbosity(::ActionModule::SystemLoggerStatus_Verbosity value) {
  
  _impl_.verbosity_ = value;
}
inline void SystemLoggerStatus::set_verbosity(::ActionModule::SystemLoggerStatus_Verbosity value) {
  _internal_set_verbosity(value);
  // @@protoc_insertion_point(field_set:ActionModule.SystemLoggerStatus.verbosity)
}

// -------------------------------------------------------------------

// GreenButtonStatus

// bool isPressed = 1;
inline void GreenButtonStatus::clear_ispressed() {
  _impl_.ispressed_ = false;
}
inline bool GreenButtonStatus::_internal_ispressed() const {
  return _impl_.ispressed_;
}
inline bool GreenButtonStatus::ispressed() const {
  // @@protoc_insertion_point(field_get:ActionModule.GreenButtonStatus.isPressed)
  return _internal_ispressed();
}
inline void GreenButtonStatus::_internal_set_ispressed(bool value) {
  
  _impl_.ispressed_ = value;
}
inline void GreenButtonStatus::set_ispressed(bool value) {
  _internal_set_ispressed(value);
  // @@protoc_insertion_point(field_set:ActionModule.GreenButtonStatus.isPressed)
}

// bool isAlive = 2;
inline void GreenButtonStatus::clear_isalive() {
  _impl_.isalive_ = false;
}
inline bool GreenButtonStatus::_internal_isalive() const {
  return _impl_.isalive_;
}
inline bool GreenButtonStatus::isalive() const {
  // @@protoc_insertion_point(field_get:ActionModule.GreenButtonStatus.isAlive)
  return _internal_isalive();
}
inline void GreenButtonStatus::_internal_set_isalive(bool value) {
  
  _impl_.isalive_ = value;
}
inline void GreenButtonStatus::set_isalive(bool value) {
  _internal_set_isalive(value);
  // @@protoc_insertion_point(field_set:ActionModule.GreenButtonStatus.isAlive)
}

// -------------------------------------------------------------------

// RedButtonStatus

// bool isPressed = 1;
inline void RedButtonStatus::clear_ispressed() {
  _impl_.ispressed_ = false;
}
inline bool RedButtonStatus::_internal_ispressed() const {
  return _impl_.ispressed_;
}
inline bool RedButtonStatus::ispressed() const {
  // @@protoc_insertion_point(field_get:ActionModule.RedButtonStatus.isPressed)
  return _internal_ispressed();
}
inline void RedButtonStatus::_internal_set_ispressed(bool value) {
  
  _impl_.ispressed_ = value;
}
inline void RedButtonStatus::set_ispressed(bool value) {
  _internal_set_ispressed(value);
  // @@protoc_insertion_point(field_set:ActionModule.RedButtonStatus.isPressed)
}

// -------------------------------------------------------------------

// WatchdogStatus

// bool isAlive = 1;
inline void WatchdogStatus::clear_isalive() {
  _impl_.isalive_ = false;
}
inline bool WatchdogStatus::_internal_isalive() const {
  return _impl_.isalive_;
}
inline bool WatchdogStatus::isalive() const {
  // @@protoc_insertion_point(field_get:ActionModule.WatchdogStatus.isAlive)
  return _internal_isalive();
}
inline void WatchdogStatus::_internal_set_isalive(bool value) {
  
  _impl_.isalive_ = value;
}
inline void WatchdogStatus::set_isalive(bool value) {
  _internal_set_isalive(value);
  // @@protoc_insertion_point(field_set:ActionModule.WatchdogStatus.isAlive)
}

// string state = 2;
inline void WatchdogStatus::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& WatchdogStatus::state() const {
  // @@protoc_insertion_point(field_get:ActionModule.WatchdogStatus.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchdogStatus::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ActionModule.WatchdogStatus.state)
}
inline std::string* WatchdogStatus::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:ActionModule.WatchdogStatus.state)
  return _s;
}
inline const std::string& WatchdogStatus::_internal_state() const {
  return _impl_.state_.Get();
}
inline void WatchdogStatus::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* WatchdogStatus::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* WatchdogStatus::release_state() {
  // @@protoc_insertion_point(field_release:ActionModule.WatchdogStatus.state)
  return _impl_.state_.Release();
}
inline void WatchdogStatus::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ActionModule.WatchdogStatus.state)
}

// -------------------------------------------------------------------

// SystemLoggerCommand

// .ActionModule.SystemLoggerCommand.Command command = 1;
inline void SystemLoggerCommand::clear_command() {
  _impl_.command_ = 0;
}
inline ::ActionModule::SystemLoggerCommand_Command SystemLoggerCommand::_internal_command() const {
  return static_cast< ::ActionModule::SystemLoggerCommand_Command >(_impl_.command_);
}
inline ::ActionModule::SystemLoggerCommand_Command SystemLoggerCommand::command() const {
  // @@protoc_insertion_point(field_get:ActionModule.SystemLoggerCommand.command)
  return _internal_command();
}
inline void SystemLoggerCommand::_internal_set_command(::ActionModule::SystemLoggerCommand_Command value) {
  
  _impl_.command_ = value;
}
inline void SystemLoggerCommand::set_command(::ActionModule::SystemLoggerCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ActionModule.SystemLoggerCommand.command)
}

// -------------------------------------------------------------------

// GreenButtonCommand

// .ActionModule.GreenButtonCommand.Command command = 1;
inline void GreenButtonCommand::clear_command() {
  _impl_.command_ = 0;
}
inline ::ActionModule::GreenButtonCommand_Command GreenButtonCommand::_internal_command() const {
  return static_cast< ::ActionModule::GreenButtonCommand_Command >(_impl_.command_);
}
inline ::ActionModule::GreenButtonCommand_Command GreenButtonCommand::command() const {
  // @@protoc_insertion_point(field_get:ActionModule.GreenButtonCommand.command)
  return _internal_command();
}
inline void GreenButtonCommand::_internal_set_command(::ActionModule::GreenButtonCommand_Command value) {
  
  _impl_.command_ = value;
}
inline void GreenButtonCommand::set_command(::ActionModule::GreenButtonCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ActionModule.GreenButtonCommand.command)
}

// -------------------------------------------------------------------

// RedButtonCommand

// .ActionModule.RedButtonCommand.Command command = 1;
inline void RedButtonCommand::clear_command() {
  _impl_.command_ = 0;
}
inline ::ActionModule::RedButtonCommand_Command RedButtonCommand::_internal_command() const {
  return static_cast< ::ActionModule::RedButtonCommand_Command >(_impl_.command_);
}
inline ::ActionModule::RedButtonCommand_Command RedButtonCommand::command() const {
  // @@protoc_insertion_point(field_get:ActionModule.RedButtonCommand.command)
  return _internal_command();
}
inline void RedButtonCommand::_internal_set_command(::ActionModule::RedButtonCommand_Command value) {
  
  _impl_.command_ = value;
}
inline void RedButtonCommand::set_command(::ActionModule::RedButtonCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ActionModule.RedButtonCommand.command)
}

// -------------------------------------------------------------------

// WatchdogCommand

// .ActionModule.WatchdogCommand.Command command = 1;
inline void WatchdogCommand::clear_command() {
  _impl_.command_ = 0;
}
inline ::ActionModule::WatchdogCommand_Command WatchdogCommand::_internal_command() const {
  return static_cast< ::ActionModule::WatchdogCommand_Command >(_impl_.command_);
}
inline ::ActionModule::WatchdogCommand_Command WatchdogCommand::command() const {
  // @@protoc_insertion_point(field_get:ActionModule.WatchdogCommand.command)
  return _internal_command();
}
inline void WatchdogCommand::_internal_set_command(::ActionModule::WatchdogCommand_Command value) {
  
  _impl_.command_ = value;
}
inline void WatchdogCommand::set_command(::ActionModule::WatchdogCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ActionModule.WatchdogCommand.command)
}

// -------------------------------------------------------------------

// SystemLoggerError

// string errorMessage = 1;
inline void SystemLoggerError::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& SystemLoggerError::errormessage() const {
  // @@protoc_insertion_point(field_get:ActionModule.SystemLoggerError.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemLoggerError::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ActionModule.SystemLoggerError.errorMessage)
}
inline std::string* SystemLoggerError::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ActionModule.SystemLoggerError.errorMessage)
  return _s;
}
inline const std::string& SystemLoggerError::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void SystemLoggerError::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemLoggerError::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* SystemLoggerError::release_errormessage() {
  // @@protoc_insertion_point(field_release:ActionModule.SystemLoggerError.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void SystemLoggerError::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ActionModule.SystemLoggerError.errorMessage)
}

// -------------------------------------------------------------------

// GreenButtonError

// string errorMessage = 1;
inline void GreenButtonError::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& GreenButtonError::errormessage() const {
  // @@protoc_insertion_point(field_get:ActionModule.GreenButtonError.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GreenButtonError::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ActionModule.GreenButtonError.errorMessage)
}
inline std::string* GreenButtonError::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ActionModule.GreenButtonError.errorMessage)
  return _s;
}
inline const std::string& GreenButtonError::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void GreenButtonError::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* GreenButtonError::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* GreenButtonError::release_errormessage() {
  // @@protoc_insertion_point(field_release:ActionModule.GreenButtonError.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void GreenButtonError::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ActionModule.GreenButtonError.errorMessage)
}

// -------------------------------------------------------------------

// RedButtonError

// string errorMessage = 1;
inline void RedButtonError::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& RedButtonError::errormessage() const {
  // @@protoc_insertion_point(field_get:ActionModule.RedButtonError.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RedButtonError::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ActionModule.RedButtonError.errorMessage)
}
inline std::string* RedButtonError::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ActionModule.RedButtonError.errorMessage)
  return _s;
}
inline const std::string& RedButtonError::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void RedButtonError::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* RedButtonError::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* RedButtonError::release_errormessage() {
  // @@protoc_insertion_point(field_release:ActionModule.RedButtonError.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void RedButtonError::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ActionModule.RedButtonError.errorMessage)
}

// -------------------------------------------------------------------

// WatchdogError

// string errorMessage = 1;
inline void WatchdogError::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& WatchdogError::errormessage() const {
  // @@protoc_insertion_point(field_get:ActionModule.WatchdogError.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchdogError::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ActionModule.WatchdogError.errorMessage)
}
inline std::string* WatchdogError::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ActionModule.WatchdogError.errorMessage)
  return _s;
}
inline const std::string& WatchdogError::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void WatchdogError::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* WatchdogError::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* WatchdogError::release_errormessage() {
  // @@protoc_insertion_point(field_release:ActionModule.WatchdogError.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void WatchdogError::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ActionModule.WatchdogError.errorMessage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActionModule

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ActionModule::SystemLoggerStatus_Verbosity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActionModule::SystemLoggerStatus_Verbosity>() {
  return ::ActionModule::SystemLoggerStatus_Verbosity_descriptor();
}
template <> struct is_proto_enum< ::ActionModule::SystemLoggerCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActionModule::SystemLoggerCommand_Command>() {
  return ::ActionModule::SystemLoggerCommand_Command_descriptor();
}
template <> struct is_proto_enum< ::ActionModule::GreenButtonCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActionModule::GreenButtonCommand_Command>() {
  return ::ActionModule::GreenButtonCommand_Command_descriptor();
}
template <> struct is_proto_enum< ::ActionModule::RedButtonCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActionModule::RedButtonCommand_Command>() {
  return ::ActionModule::RedButtonCommand_Command_descriptor();
}
template <> struct is_proto_enum< ::ActionModule::WatchdogCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActionModule::WatchdogCommand_Command>() {
  return ::ActionModule::WatchdogCommand_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fActionModule_2eproto
