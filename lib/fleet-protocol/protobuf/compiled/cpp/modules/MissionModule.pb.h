// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/MissionModule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fMissionModule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fMissionModule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fMissionModule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fMissionModule_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fMissionModule_2eproto;
namespace MissionModule {
class AutonomyCommand;
struct AutonomyCommandDefaultTypeInternal;
extern AutonomyCommandDefaultTypeInternal _AutonomyCommand_default_instance_;
class AutonomyError;
struct AutonomyErrorDefaultTypeInternal;
extern AutonomyErrorDefaultTypeInternal _AutonomyError_default_instance_;
class AutonomyStatus;
struct AutonomyStatusDefaultTypeInternal;
extern AutonomyStatusDefaultTypeInternal _AutonomyStatus_default_instance_;
class AutonomyStatus_Telemetry;
struct AutonomyStatus_TelemetryDefaultTypeInternal;
extern AutonomyStatus_TelemetryDefaultTypeInternal _AutonomyStatus_Telemetry_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Station;
struct StationDefaultTypeInternal;
extern StationDefaultTypeInternal _Station_default_instance_;
}  // namespace MissionModule
PROTOBUF_NAMESPACE_OPEN
template<> ::MissionModule::AutonomyCommand* Arena::CreateMaybeMessage<::MissionModule::AutonomyCommand>(Arena*);
template<> ::MissionModule::AutonomyError* Arena::CreateMaybeMessage<::MissionModule::AutonomyError>(Arena*);
template<> ::MissionModule::AutonomyStatus* Arena::CreateMaybeMessage<::MissionModule::AutonomyStatus>(Arena*);
template<> ::MissionModule::AutonomyStatus_Telemetry* Arena::CreateMaybeMessage<::MissionModule::AutonomyStatus_Telemetry>(Arena*);
template<> ::MissionModule::Position* Arena::CreateMaybeMessage<::MissionModule::Position>(Arena*);
template<> ::MissionModule::Station* Arena::CreateMaybeMessage<::MissionModule::Station>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MissionModule {

enum AutonomyStatus_State : int {
  AutonomyStatus_State_IDLE = 0,
  AutonomyStatus_State_DRIVE = 1,
  AutonomyStatus_State_IN_STOP = 2,
  AutonomyStatus_State_OBSTACLE = 3,
  AutonomyStatus_State_ERROR = 4,
  AutonomyStatus_State_AutonomyStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AutonomyStatus_State_AutonomyStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AutonomyStatus_State_IsValid(int value);
constexpr AutonomyStatus_State AutonomyStatus_State_State_MIN = AutonomyStatus_State_IDLE;
constexpr AutonomyStatus_State AutonomyStatus_State_State_MAX = AutonomyStatus_State_ERROR;
constexpr int AutonomyStatus_State_State_ARRAYSIZE = AutonomyStatus_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutonomyStatus_State_descriptor();
template<typename T>
inline const std::string& AutonomyStatus_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutonomyStatus_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutonomyStatus_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AutonomyStatus_State_descriptor(), enum_t_value);
}
inline bool AutonomyStatus_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutonomyStatus_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AutonomyStatus_State>(
    AutonomyStatus_State_descriptor(), name, value);
}
enum AutonomyCommand_Action : int {
  AutonomyCommand_Action_NO_ACTION = 0,
  AutonomyCommand_Action_STOP = 1,
  AutonomyCommand_Action_START = 2,
  AutonomyCommand_Action_AutonomyCommand_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AutonomyCommand_Action_AutonomyCommand_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AutonomyCommand_Action_IsValid(int value);
constexpr AutonomyCommand_Action AutonomyCommand_Action_Action_MIN = AutonomyCommand_Action_NO_ACTION;
constexpr AutonomyCommand_Action AutonomyCommand_Action_Action_MAX = AutonomyCommand_Action_START;
constexpr int AutonomyCommand_Action_Action_ARRAYSIZE = AutonomyCommand_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutonomyCommand_Action_descriptor();
template<typename T>
inline const std::string& AutonomyCommand_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutonomyCommand_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutonomyCommand_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AutonomyCommand_Action_descriptor(), enum_t_value);
}
inline bool AutonomyCommand_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutonomyCommand_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AutonomyCommand_Action>(
    AutonomyCommand_Action_descriptor(), name, value);
}
// ===================================================================

class AutonomyStatus_Telemetry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.AutonomyStatus.Telemetry) */ {
 public:
  inline AutonomyStatus_Telemetry() : AutonomyStatus_Telemetry(nullptr) {}
  ~AutonomyStatus_Telemetry() override;
  explicit PROTOBUF_CONSTEXPR AutonomyStatus_Telemetry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutonomyStatus_Telemetry(const AutonomyStatus_Telemetry& from);
  AutonomyStatus_Telemetry(AutonomyStatus_Telemetry&& from) noexcept
    : AutonomyStatus_Telemetry() {
    *this = ::std::move(from);
  }

  inline AutonomyStatus_Telemetry& operator=(const AutonomyStatus_Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomyStatus_Telemetry& operator=(AutonomyStatus_Telemetry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutonomyStatus_Telemetry& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutonomyStatus_Telemetry* internal_default_instance() {
    return reinterpret_cast<const AutonomyStatus_Telemetry*>(
               &_AutonomyStatus_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutonomyStatus_Telemetry& a, AutonomyStatus_Telemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomyStatus_Telemetry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomyStatus_Telemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutonomyStatus_Telemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutonomyStatus_Telemetry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutonomyStatus_Telemetry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutonomyStatus_Telemetry& from) {
    AutonomyStatus_Telemetry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomyStatus_Telemetry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.AutonomyStatus.Telemetry";
  }
  protected:
  explicit AutonomyStatus_Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kSpeedFieldNumber = 1,
    kFuelFieldNumber = 2,
  };
  // .MissionModule.Position position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::MissionModule::Position& position() const;
  PROTOBUF_NODISCARD ::MissionModule::Position* release_position();
  ::MissionModule::Position* mutable_position();
  void set_allocated_position(::MissionModule::Position* position);
  private:
  const ::MissionModule::Position& _internal_position() const;
  ::MissionModule::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::MissionModule::Position* position);
  ::MissionModule::Position* unsafe_arena_release_position();

  // double speed = 1;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // double fuel = 2;
  void clear_fuel();
  double fuel() const;
  void set_fuel(double value);
  private:
  double _internal_fuel() const;
  void _internal_set_fuel(double value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.AutonomyStatus.Telemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::MissionModule::Position* position_;
    double speed_;
    double fuel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class AutonomyStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.AutonomyStatus) */ {
 public:
  inline AutonomyStatus() : AutonomyStatus(nullptr) {}
  ~AutonomyStatus() override;
  explicit PROTOBUF_CONSTEXPR AutonomyStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutonomyStatus(const AutonomyStatus& from);
  AutonomyStatus(AutonomyStatus&& from) noexcept
    : AutonomyStatus() {
    *this = ::std::move(from);
  }

  inline AutonomyStatus& operator=(const AutonomyStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomyStatus& operator=(AutonomyStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutonomyStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutonomyStatus* internal_default_instance() {
    return reinterpret_cast<const AutonomyStatus*>(
               &_AutonomyStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutonomyStatus& a, AutonomyStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomyStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomyStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutonomyStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutonomyStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutonomyStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutonomyStatus& from) {
    AutonomyStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomyStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.AutonomyStatus";
  }
  protected:
  explicit AutonomyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AutonomyStatus_Telemetry Telemetry;

  typedef AutonomyStatus_State State;
  static constexpr State IDLE =
    AutonomyStatus_State_IDLE;
  static constexpr State DRIVE =
    AutonomyStatus_State_DRIVE;
  static constexpr State IN_STOP =
    AutonomyStatus_State_IN_STOP;
  static constexpr State OBSTACLE =
    AutonomyStatus_State_OBSTACLE;
  static constexpr State ERROR =
    AutonomyStatus_State_ERROR;
  static inline bool State_IsValid(int value) {
    return AutonomyStatus_State_IsValid(value);
  }
  static constexpr State State_MIN =
    AutonomyStatus_State_State_MIN;
  static constexpr State State_MAX =
    AutonomyStatus_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    AutonomyStatus_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return AutonomyStatus_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return AutonomyStatus_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return AutonomyStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryFieldNumber = 1,
    kNextStopFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
  bool has_telemetry() const;
  private:
  bool _internal_has_telemetry() const;
  public:
  void clear_telemetry();
  const ::MissionModule::AutonomyStatus_Telemetry& telemetry() const;
  PROTOBUF_NODISCARD ::MissionModule::AutonomyStatus_Telemetry* release_telemetry();
  ::MissionModule::AutonomyStatus_Telemetry* mutable_telemetry();
  void set_allocated_telemetry(::MissionModule::AutonomyStatus_Telemetry* telemetry);
  private:
  const ::MissionModule::AutonomyStatus_Telemetry& _internal_telemetry() const;
  ::MissionModule::AutonomyStatus_Telemetry* _internal_mutable_telemetry();
  public:
  void unsafe_arena_set_allocated_telemetry(
      ::MissionModule::AutonomyStatus_Telemetry* telemetry);
  ::MissionModule::AutonomyStatus_Telemetry* unsafe_arena_release_telemetry();

  // optional .MissionModule.Station nextStop = 3;
  bool has_nextstop() const;
  private:
  bool _internal_has_nextstop() const;
  public:
  void clear_nextstop();
  const ::MissionModule::Station& nextstop() const;
  PROTOBUF_NODISCARD ::MissionModule::Station* release_nextstop();
  ::MissionModule::Station* mutable_nextstop();
  void set_allocated_nextstop(::MissionModule::Station* nextstop);
  private:
  const ::MissionModule::Station& _internal_nextstop() const;
  ::MissionModule::Station* _internal_mutable_nextstop();
  public:
  void unsafe_arena_set_allocated_nextstop(
      ::MissionModule::Station* nextstop);
  ::MissionModule::Station* unsafe_arena_release_nextstop();

  // .MissionModule.AutonomyStatus.State state = 2;
  void clear_state();
  ::MissionModule::AutonomyStatus_State state() const;
  void set_state(::MissionModule::AutonomyStatus_State value);
  private:
  ::MissionModule::AutonomyStatus_State _internal_state() const;
  void _internal_set_state(::MissionModule::AutonomyStatus_State value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.AutonomyStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::MissionModule::AutonomyStatus_Telemetry* telemetry_;
    ::MissionModule::Station* nextstop_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class AutonomyCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.AutonomyCommand) */ {
 public:
  inline AutonomyCommand() : AutonomyCommand(nullptr) {}
  ~AutonomyCommand() override;
  explicit PROTOBUF_CONSTEXPR AutonomyCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutonomyCommand(const AutonomyCommand& from);
  AutonomyCommand(AutonomyCommand&& from) noexcept
    : AutonomyCommand() {
    *this = ::std::move(from);
  }

  inline AutonomyCommand& operator=(const AutonomyCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomyCommand& operator=(AutonomyCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutonomyCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutonomyCommand* internal_default_instance() {
    return reinterpret_cast<const AutonomyCommand*>(
               &_AutonomyCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AutonomyCommand& a, AutonomyCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomyCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomyCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutonomyCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutonomyCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutonomyCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutonomyCommand& from) {
    AutonomyCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomyCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.AutonomyCommand";
  }
  protected:
  explicit AutonomyCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AutonomyCommand_Action Action;
  static constexpr Action NO_ACTION =
    AutonomyCommand_Action_NO_ACTION;
  static constexpr Action STOP =
    AutonomyCommand_Action_STOP;
  static constexpr Action START =
    AutonomyCommand_Action_START;
  static inline bool Action_IsValid(int value) {
    return AutonomyCommand_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    AutonomyCommand_Action_Action_MIN;
  static constexpr Action Action_MAX =
    AutonomyCommand_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    AutonomyCommand_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return AutonomyCommand_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return AutonomyCommand_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return AutonomyCommand_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kRouteFieldNumber = 2,
    kActionFieldNumber = 3,
  };
  // repeated .MissionModule.Station stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::MissionModule::Station* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >*
      mutable_stops();
  private:
  const ::MissionModule::Station& _internal_stops(int index) const;
  ::MissionModule::Station* _internal_add_stops();
  public:
  const ::MissionModule::Station& stops(int index) const;
  ::MissionModule::Station* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >&
      stops() const;

  // string route = 2;
  void clear_route();
  const std::string& route() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route();
  PROTOBUF_NODISCARD std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // .MissionModule.AutonomyCommand.Action action = 3;
  void clear_action();
  ::MissionModule::AutonomyCommand_Action action() const;
  void set_action(::MissionModule::AutonomyCommand_Action value);
  private:
  ::MissionModule::AutonomyCommand_Action _internal_action() const;
  void _internal_set_action(::MissionModule::AutonomyCommand_Action value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.AutonomyCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station > stops_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
    int action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class AutonomyError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.AutonomyError) */ {
 public:
  inline AutonomyError() : AutonomyError(nullptr) {}
  ~AutonomyError() override;
  explicit PROTOBUF_CONSTEXPR AutonomyError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutonomyError(const AutonomyError& from);
  AutonomyError(AutonomyError&& from) noexcept
    : AutonomyError() {
    *this = ::std::move(from);
  }

  inline AutonomyError& operator=(const AutonomyError& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomyError& operator=(AutonomyError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutonomyError& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutonomyError* internal_default_instance() {
    return reinterpret_cast<const AutonomyError*>(
               &_AutonomyError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AutonomyError& a, AutonomyError& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomyError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomyError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutonomyError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutonomyError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutonomyError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutonomyError& from) {
    AutonomyError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomyError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.AutonomyError";
  }
  protected:
  explicit AutonomyError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinishedStopsFieldNumber = 1,
  };
  // repeated .MissionModule.Station finishedStops = 1;
  int finishedstops_size() const;
  private:
  int _internal_finishedstops_size() const;
  public:
  void clear_finishedstops();
  ::MissionModule::Station* mutable_finishedstops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >*
      mutable_finishedstops();
  private:
  const ::MissionModule::Station& _internal_finishedstops(int index) const;
  ::MissionModule::Station* _internal_add_finishedstops();
  public:
  const ::MissionModule::Station& finishedstops(int index) const;
  ::MissionModule::Station* add_finishedstops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >&
      finishedstops() const;

  // @@protoc_insertion_point(class_scope:MissionModule.AutonomyError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station > finishedstops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class Station final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.Station) */ {
 public:
  inline Station() : Station(nullptr) {}
  ~Station() override;
  explicit PROTOBUF_CONSTEXPR Station(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Station(const Station& from);
  Station(Station&& from) noexcept
    : Station() {
    *this = ::std::move(from);
  }

  inline Station& operator=(const Station& from) {
    CopyFrom(from);
    return *this;
  }
  inline Station& operator=(Station&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Station& default_instance() {
    return *internal_default_instance();
  }
  static inline const Station* internal_default_instance() {
    return reinterpret_cast<const Station*>(
               &_Station_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Station& a, Station& b) {
    a.Swap(&b);
  }
  inline void Swap(Station* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Station* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Station* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Station>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Station& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Station& from) {
    Station::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Station* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.Station";
  }
  protected:
  explicit Station(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .MissionModule.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::MissionModule::Position& position() const;
  PROTOBUF_NODISCARD ::MissionModule::Position* release_position();
  ::MissionModule::Position* mutable_position();
  void set_allocated_position(::MissionModule::Position* position);
  private:
  const ::MissionModule::Position& _internal_position() const;
  ::MissionModule::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::MissionModule::Position* position);
  ::MissionModule::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:MissionModule.Station)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::MissionModule::Position* position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_;
    double longitude_;
    double altitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutonomyStatus_Telemetry

// double speed = 1;
inline void AutonomyStatus_Telemetry::clear_speed() {
  _impl_.speed_ = 0;
}
inline double AutonomyStatus_Telemetry::_internal_speed() const {
  return _impl_.speed_;
}
inline double AutonomyStatus_Telemetry::speed() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.Telemetry.speed)
  return _internal_speed();
}
inline void AutonomyStatus_Telemetry::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void AutonomyStatus_Telemetry::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyStatus.Telemetry.speed)
}

// double fuel = 2;
inline void AutonomyStatus_Telemetry::clear_fuel() {
  _impl_.fuel_ = 0;
}
inline double AutonomyStatus_Telemetry::_internal_fuel() const {
  return _impl_.fuel_;
}
inline double AutonomyStatus_Telemetry::fuel() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.Telemetry.fuel)
  return _internal_fuel();
}
inline void AutonomyStatus_Telemetry::_internal_set_fuel(double value) {
  
  _impl_.fuel_ = value;
}
inline void AutonomyStatus_Telemetry::set_fuel(double value) {
  _internal_set_fuel(value);
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyStatus.Telemetry.fuel)
}

// .MissionModule.Position position = 3;
inline bool AutonomyStatus_Telemetry::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool AutonomyStatus_Telemetry::has_position() const {
  return _internal_has_position();
}
inline void AutonomyStatus_Telemetry::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::MissionModule::Position& AutonomyStatus_Telemetry::_internal_position() const {
  const ::MissionModule::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Position&>(
      ::MissionModule::_Position_default_instance_);
}
inline const ::MissionModule::Position& AutonomyStatus_Telemetry::position() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.Telemetry.position)
  return _internal_position();
}
inline void AutonomyStatus_Telemetry::unsafe_arena_set_allocated_position(
    ::MissionModule::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.AutonomyStatus.Telemetry.position)
}
inline ::MissionModule::Position* AutonomyStatus_Telemetry::release_position() {
  
  ::MissionModule::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Position* AutonomyStatus_Telemetry::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:MissionModule.AutonomyStatus.Telemetry.position)
  
  ::MissionModule::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::MissionModule::Position* AutonomyStatus_Telemetry::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::MissionModule::Position* AutonomyStatus_Telemetry::mutable_position() {
  ::MissionModule::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyStatus.Telemetry.position)
  return _msg;
}
inline void AutonomyStatus_Telemetry::set_allocated_position(::MissionModule::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.AutonomyStatus.Telemetry.position)
}

// -------------------------------------------------------------------

// AutonomyStatus

// .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
inline bool AutonomyStatus::_internal_has_telemetry() const {
  return this != internal_default_instance() && _impl_.telemetry_ != nullptr;
}
inline bool AutonomyStatus::has_telemetry() const {
  return _internal_has_telemetry();
}
inline void AutonomyStatus::clear_telemetry() {
  if (GetArenaForAllocation() == nullptr && _impl_.telemetry_ != nullptr) {
    delete _impl_.telemetry_;
  }
  _impl_.telemetry_ = nullptr;
}
inline const ::MissionModule::AutonomyStatus_Telemetry& AutonomyStatus::_internal_telemetry() const {
  const ::MissionModule::AutonomyStatus_Telemetry* p = _impl_.telemetry_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::AutonomyStatus_Telemetry&>(
      ::MissionModule::_AutonomyStatus_Telemetry_default_instance_);
}
inline const ::MissionModule::AutonomyStatus_Telemetry& AutonomyStatus::telemetry() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.telemetry)
  return _internal_telemetry();
}
inline void AutonomyStatus::unsafe_arena_set_allocated_telemetry(
    ::MissionModule::AutonomyStatus_Telemetry* telemetry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.telemetry_);
  }
  _impl_.telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.AutonomyStatus.telemetry)
}
inline ::MissionModule::AutonomyStatus_Telemetry* AutonomyStatus::release_telemetry() {
  
  ::MissionModule::AutonomyStatus_Telemetry* temp = _impl_.telemetry_;
  _impl_.telemetry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::AutonomyStatus_Telemetry* AutonomyStatus::unsafe_arena_release_telemetry() {
  // @@protoc_insertion_point(field_release:MissionModule.AutonomyStatus.telemetry)
  
  ::MissionModule::AutonomyStatus_Telemetry* temp = _impl_.telemetry_;
  _impl_.telemetry_ = nullptr;
  return temp;
}
inline ::MissionModule::AutonomyStatus_Telemetry* AutonomyStatus::_internal_mutable_telemetry() {
  
  if (_impl_.telemetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::AutonomyStatus_Telemetry>(GetArenaForAllocation());
    _impl_.telemetry_ = p;
  }
  return _impl_.telemetry_;
}
inline ::MissionModule::AutonomyStatus_Telemetry* AutonomyStatus::mutable_telemetry() {
  ::MissionModule::AutonomyStatus_Telemetry* _msg = _internal_mutable_telemetry();
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyStatus.telemetry)
  return _msg;
}
inline void AutonomyStatus::set_allocated_telemetry(::MissionModule::AutonomyStatus_Telemetry* telemetry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.telemetry_;
  }
  if (telemetry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(telemetry);
    if (message_arena != submessage_arena) {
      telemetry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.telemetry_ = telemetry;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.AutonomyStatus.telemetry)
}

// .MissionModule.AutonomyStatus.State state = 2;
inline void AutonomyStatus::clear_state() {
  _impl_.state_ = 0;
}
inline ::MissionModule::AutonomyStatus_State AutonomyStatus::_internal_state() const {
  return static_cast< ::MissionModule::AutonomyStatus_State >(_impl_.state_);
}
inline ::MissionModule::AutonomyStatus_State AutonomyStatus::state() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.state)
  return _internal_state();
}
inline void AutonomyStatus::_internal_set_state(::MissionModule::AutonomyStatus_State value) {
  
  _impl_.state_ = value;
}
inline void AutonomyStatus::set_state(::MissionModule::AutonomyStatus_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyStatus.state)
}

// optional .MissionModule.Station nextStop = 3;
inline bool AutonomyStatus::_internal_has_nextstop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nextstop_ != nullptr);
  return value;
}
inline bool AutonomyStatus::has_nextstop() const {
  return _internal_has_nextstop();
}
inline void AutonomyStatus::clear_nextstop() {
  if (_impl_.nextstop_ != nullptr) _impl_.nextstop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::MissionModule::Station& AutonomyStatus::_internal_nextstop() const {
  const ::MissionModule::Station* p = _impl_.nextstop_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Station&>(
      ::MissionModule::_Station_default_instance_);
}
inline const ::MissionModule::Station& AutonomyStatus::nextstop() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.nextStop)
  return _internal_nextstop();
}
inline void AutonomyStatus::unsafe_arena_set_allocated_nextstop(
    ::MissionModule::Station* nextstop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nextstop_);
  }
  _impl_.nextstop_ = nextstop;
  if (nextstop) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.AutonomyStatus.nextStop)
}
inline ::MissionModule::Station* AutonomyStatus::release_nextstop() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MissionModule::Station* temp = _impl_.nextstop_;
  _impl_.nextstop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Station* AutonomyStatus::unsafe_arena_release_nextstop() {
  // @@protoc_insertion_point(field_release:MissionModule.AutonomyStatus.nextStop)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MissionModule::Station* temp = _impl_.nextstop_;
  _impl_.nextstop_ = nullptr;
  return temp;
}
inline ::MissionModule::Station* AutonomyStatus::_internal_mutable_nextstop() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nextstop_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Station>(GetArenaForAllocation());
    _impl_.nextstop_ = p;
  }
  return _impl_.nextstop_;
}
inline ::MissionModule::Station* AutonomyStatus::mutable_nextstop() {
  ::MissionModule::Station* _msg = _internal_mutable_nextstop();
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyStatus.nextStop)
  return _msg;
}
inline void AutonomyStatus::set_allocated_nextstop(::MissionModule::Station* nextstop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nextstop_;
  }
  if (nextstop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nextstop);
    if (message_arena != submessage_arena) {
      nextstop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nextstop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nextstop_ = nextstop;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.AutonomyStatus.nextStop)
}

// -------------------------------------------------------------------

// AutonomyCommand

// repeated .MissionModule.Station stops = 1;
inline int AutonomyCommand::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int AutonomyCommand::stops_size() const {
  return _internal_stops_size();
}
inline void AutonomyCommand::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::MissionModule::Station* AutonomyCommand::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyCommand.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >*
AutonomyCommand::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:MissionModule.AutonomyCommand.stops)
  return &_impl_.stops_;
}
inline const ::MissionModule::Station& AutonomyCommand::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::MissionModule::Station& AutonomyCommand::stops(int index) const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyCommand.stops)
  return _internal_stops(index);
}
inline ::MissionModule::Station* AutonomyCommand::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::MissionModule::Station* AutonomyCommand::add_stops() {
  ::MissionModule::Station* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:MissionModule.AutonomyCommand.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >&
AutonomyCommand::stops() const {
  // @@protoc_insertion_point(field_list:MissionModule.AutonomyCommand.stops)
  return _impl_.stops_;
}

// string route = 2;
inline void AutonomyCommand::clear_route() {
  _impl_.route_.ClearToEmpty();
}
inline const std::string& AutonomyCommand::route() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyCommand.route)
  return _internal_route();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutonomyCommand::set_route(ArgT0&& arg0, ArgT... args) {
 
 _impl_.route_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyCommand.route)
}
inline std::string* AutonomyCommand::mutable_route() {
  std::string* _s = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyCommand.route)
  return _s;
}
inline const std::string& AutonomyCommand::_internal_route() const {
  return _impl_.route_.Get();
}
inline void AutonomyCommand::_internal_set_route(const std::string& value) {
  
  _impl_.route_.Set(value, GetArenaForAllocation());
}
inline std::string* AutonomyCommand::_internal_mutable_route() {
  
  return _impl_.route_.Mutable(GetArenaForAllocation());
}
inline std::string* AutonomyCommand::release_route() {
  // @@protoc_insertion_point(field_release:MissionModule.AutonomyCommand.route)
  return _impl_.route_.Release();
}
inline void AutonomyCommand::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  _impl_.route_.SetAllocated(route, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_.IsDefault()) {
    _impl_.route_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MissionModule.AutonomyCommand.route)
}

// .MissionModule.AutonomyCommand.Action action = 3;
inline void AutonomyCommand::clear_action() {
  _impl_.action_ = 0;
}
inline ::MissionModule::AutonomyCommand_Action AutonomyCommand::_internal_action() const {
  return static_cast< ::MissionModule::AutonomyCommand_Action >(_impl_.action_);
}
inline ::MissionModule::AutonomyCommand_Action AutonomyCommand::action() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyCommand.action)
  return _internal_action();
}
inline void AutonomyCommand::_internal_set_action(::MissionModule::AutonomyCommand_Action value) {
  
  _impl_.action_ = value;
}
inline void AutonomyCommand::set_action(::MissionModule::AutonomyCommand_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyCommand.action)
}

// -------------------------------------------------------------------

// AutonomyError

// repeated .MissionModule.Station finishedStops = 1;
inline int AutonomyError::_internal_finishedstops_size() const {
  return _impl_.finishedstops_.size();
}
inline int AutonomyError::finishedstops_size() const {
  return _internal_finishedstops_size();
}
inline void AutonomyError::clear_finishedstops() {
  _impl_.finishedstops_.Clear();
}
inline ::MissionModule::Station* AutonomyError::mutable_finishedstops(int index) {
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyError.finishedStops)
  return _impl_.finishedstops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >*
AutonomyError::mutable_finishedstops() {
  // @@protoc_insertion_point(field_mutable_list:MissionModule.AutonomyError.finishedStops)
  return &_impl_.finishedstops_;
}
inline const ::MissionModule::Station& AutonomyError::_internal_finishedstops(int index) const {
  return _impl_.finishedstops_.Get(index);
}
inline const ::MissionModule::Station& AutonomyError::finishedstops(int index) const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyError.finishedStops)
  return _internal_finishedstops(index);
}
inline ::MissionModule::Station* AutonomyError::_internal_add_finishedstops() {
  return _impl_.finishedstops_.Add();
}
inline ::MissionModule::Station* AutonomyError::add_finishedstops() {
  ::MissionModule::Station* _add = _internal_add_finishedstops();
  // @@protoc_insertion_point(field_add:MissionModule.AutonomyError.finishedStops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >&
AutonomyError::finishedstops() const {
  // @@protoc_insertion_point(field_list:MissionModule.AutonomyError.finishedStops)
  return _impl_.finishedstops_;
}

// -------------------------------------------------------------------

// Station

// string name = 1;
inline void Station::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Station::name() const {
  // @@protoc_insertion_point(field_get:MissionModule.Station.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Station::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MissionModule.Station.name)
}
inline std::string* Station::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MissionModule.Station.name)
  return _s;
}
inline const std::string& Station::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Station::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Station::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Station::release_name() {
  // @@protoc_insertion_point(field_release:MissionModule.Station.name)
  return _impl_.name_.Release();
}
inline void Station::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MissionModule.Station.name)
}

// .MissionModule.Position position = 2;
inline bool Station::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Station::has_position() const {
  return _internal_has_position();
}
inline void Station::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::MissionModule::Position& Station::_internal_position() const {
  const ::MissionModule::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Position&>(
      ::MissionModule::_Position_default_instance_);
}
inline const ::MissionModule::Position& Station::position() const {
  // @@protoc_insertion_point(field_get:MissionModule.Station.position)
  return _internal_position();
}
inline void Station::unsafe_arena_set_allocated_position(
    ::MissionModule::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.Station.position)
}
inline ::MissionModule::Position* Station::release_position() {
  
  ::MissionModule::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Position* Station::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:MissionModule.Station.position)
  
  ::MissionModule::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::MissionModule::Position* Station::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::MissionModule::Position* Station::mutable_position() {
  ::MissionModule::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:MissionModule.Station.position)
  return _msg;
}
inline void Station::set_allocated_position(::MissionModule::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.Station.position)
}

// -------------------------------------------------------------------

// Position

// double latitude = 1;
inline void Position::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Position::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Position::latitude() const {
  // @@protoc_insertion_point(field_get:MissionModule.Position.latitude)
  return _internal_latitude();
}
inline void Position::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Position::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:MissionModule.Position.latitude)
}

// double longitude = 2;
inline void Position::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Position::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Position::longitude() const {
  // @@protoc_insertion_point(field_get:MissionModule.Position.longitude)
  return _internal_longitude();
}
inline void Position::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Position::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:MissionModule.Position.longitude)
}

// double altitude = 3;
inline void Position::clear_altitude() {
  _impl_.altitude_ = 0;
}
inline double Position::_internal_altitude() const {
  return _impl_.altitude_;
}
inline double Position::altitude() const {
  // @@protoc_insertion_point(field_get:MissionModule.Position.altitude)
  return _internal_altitude();
}
inline void Position::_internal_set_altitude(double value) {
  
  _impl_.altitude_ = value;
}
inline void Position::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:MissionModule.Position.altitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MissionModule

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MissionModule::AutonomyStatus_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MissionModule::AutonomyStatus_State>() {
  return ::MissionModule::AutonomyStatus_State_descriptor();
}
template <> struct is_proto_enum< ::MissionModule::AutonomyCommand_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MissionModule::AutonomyCommand_Action>() {
  return ::MissionModule::AutonomyCommand_Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fMissionModule_2eproto
