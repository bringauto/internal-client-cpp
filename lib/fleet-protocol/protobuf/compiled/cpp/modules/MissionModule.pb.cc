// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/MissionModule.proto

#include "modules/MissionModule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace MissionModule {
PROTOBUF_CONSTEXPR AutonomyStatus_Telemetry::AutonomyStatus_Telemetry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.fuel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutonomyStatus_TelemetryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutonomyStatus_TelemetryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutonomyStatus_TelemetryDefaultTypeInternal() {}
  union {
    AutonomyStatus_Telemetry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutonomyStatus_TelemetryDefaultTypeInternal _AutonomyStatus_Telemetry_default_instance_;
PROTOBUF_CONSTEXPR AutonomyStatus::AutonomyStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.telemetry_)*/nullptr
  , /*decltype(_impl_.nextstop_)*/nullptr
  , /*decltype(_impl_.state_)*/0} {}
struct AutonomyStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutonomyStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutonomyStatusDefaultTypeInternal() {}
  union {
    AutonomyStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutonomyStatusDefaultTypeInternal _AutonomyStatus_default_instance_;
PROTOBUF_CONSTEXPR AutonomyCommand::AutonomyCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_)*/{}
  , /*decltype(_impl_.route_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutonomyCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutonomyCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutonomyCommandDefaultTypeInternal() {}
  union {
    AutonomyCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutonomyCommandDefaultTypeInternal _AutonomyCommand_default_instance_;
PROTOBUF_CONSTEXPR AutonomyError::AutonomyError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.finishedstops_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutonomyErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutonomyErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutonomyErrorDefaultTypeInternal() {}
  union {
    AutonomyError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutonomyErrorDefaultTypeInternal _AutonomyError_default_instance_;
PROTOBUF_CONSTEXPR Station::Station(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StationDefaultTypeInternal() {}
  union {
    Station _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StationDefaultTypeInternal _Station_default_instance_;
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.altitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace MissionModule
static ::_pb::Metadata file_level_metadata_modules_2fMissionModule_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fMissionModule_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fMissionModule_2eproto = nullptr;

const uint32_t TableStruct_modules_2fMissionModule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus_Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus_Telemetry, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus_Telemetry, _impl_.fuel_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus_Telemetry, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, _impl_.telemetry_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, _impl_.nextstop_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyCommand, _impl_.stops_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyCommand, _impl_.route_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyCommand, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyError, _impl_.finishedstops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Station, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Station, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::Station, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Position, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::Position, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::Position, _impl_.altitude_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MissionModule::AutonomyStatus_Telemetry)},
  { 9, 18, -1, sizeof(::MissionModule::AutonomyStatus)},
  { 21, -1, -1, sizeof(::MissionModule::AutonomyCommand)},
  { 30, -1, -1, sizeof(::MissionModule::AutonomyError)},
  { 37, -1, -1, sizeof(::MissionModule::Station)},
  { 45, -1, -1, sizeof(::MissionModule::Position)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::MissionModule::_AutonomyStatus_Telemetry_default_instance_._instance,
  &::MissionModule::_AutonomyStatus_default_instance_._instance,
  &::MissionModule::_AutonomyCommand_default_instance_._instance,
  &::MissionModule::_AutonomyError_default_instance_._instance,
  &::MissionModule::_Station_default_instance_._instance,
  &::MissionModule::_Position_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fMissionModule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033modules/MissionModule.proto\022\rMissionMo"
  "dule\"\325\002\n\016AutonomyStatus\022:\n\ttelemetry\030\001 \001"
  "(\0132\'.MissionModule.AutonomyStatus.Teleme"
  "try\0222\n\005state\030\002 \001(\0162#.MissionModule.Auton"
  "omyStatus.State\022-\n\010nextStop\030\003 \001(\0132\026.Miss"
  "ionModule.StationH\000\210\001\001\032S\n\tTelemetry\022\r\n\005s"
  "peed\030\001 \001(\001\022\014\n\004fuel\030\002 \001(\001\022)\n\010position\030\003 \001"
  "(\0132\027.MissionModule.Position\"B\n\005State\022\010\n\004"
  "IDLE\020\000\022\t\n\005DRIVE\020\001\022\013\n\007IN_STOP\020\002\022\014\n\010OBSTAC"
  "LE\020\003\022\t\n\005ERROR\020\004B\013\n\t_nextStop\"\254\001\n\017Autonom"
  "yCommand\022%\n\005stops\030\001 \003(\0132\026.MissionModule."
  "Station\022\r\n\005route\030\002 \001(\t\0225\n\006action\030\003 \001(\0162%"
  ".MissionModule.AutonomyCommand.Action\",\n"
  "\006Action\022\r\n\tNO_ACTION\020\000\022\010\n\004STOP\020\001\022\t\n\005STAR"
  "T\020\002\">\n\rAutonomyError\022-\n\rfinishedStops\030\001 "
  "\003(\0132\026.MissionModule.Station\"B\n\007Station\022\014"
  "\n\004name\030\001 \001(\t\022)\n\010position\030\002 \001(\0132\027.Mission"
  "Module.Position\"A\n\010Position\022\020\n\010latitude\030"
  "\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010altitude\030\003 \001"
  "(\001B>Z!../internal/pkg/ba_proto;ba_proto\252"
  "\002\030Google.Protobuf.ba_protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fMissionModule_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fMissionModule_2eproto = {
    false, false, 834, descriptor_table_protodef_modules_2fMissionModule_2eproto,
    "modules/MissionModule.proto",
    &descriptor_table_modules_2fMissionModule_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_modules_2fMissionModule_2eproto::offsets,
    file_level_metadata_modules_2fMissionModule_2eproto, file_level_enum_descriptors_modules_2fMissionModule_2eproto,
    file_level_service_descriptors_modules_2fMissionModule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fMissionModule_2eproto_getter() {
  return &descriptor_table_modules_2fMissionModule_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fMissionModule_2eproto(&descriptor_table_modules_2fMissionModule_2eproto);
namespace MissionModule {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutonomyStatus_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fMissionModule_2eproto);
  return file_level_enum_descriptors_modules_2fMissionModule_2eproto[0];
}
bool AutonomyStatus_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AutonomyStatus_State AutonomyStatus::IDLE;
constexpr AutonomyStatus_State AutonomyStatus::DRIVE;
constexpr AutonomyStatus_State AutonomyStatus::IN_STOP;
constexpr AutonomyStatus_State AutonomyStatus::OBSTACLE;
constexpr AutonomyStatus_State AutonomyStatus::ERROR;
constexpr AutonomyStatus_State AutonomyStatus::State_MIN;
constexpr AutonomyStatus_State AutonomyStatus::State_MAX;
constexpr int AutonomyStatus::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutonomyCommand_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fMissionModule_2eproto);
  return file_level_enum_descriptors_modules_2fMissionModule_2eproto[1];
}
bool AutonomyCommand_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AutonomyCommand_Action AutonomyCommand::NO_ACTION;
constexpr AutonomyCommand_Action AutonomyCommand::STOP;
constexpr AutonomyCommand_Action AutonomyCommand::START;
constexpr AutonomyCommand_Action AutonomyCommand::Action_MIN;
constexpr AutonomyCommand_Action AutonomyCommand::Action_MAX;
constexpr int AutonomyCommand::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AutonomyStatus_Telemetry::_Internal {
 public:
  static const ::MissionModule::Position& position(const AutonomyStatus_Telemetry* msg);
};

const ::MissionModule::Position&
AutonomyStatus_Telemetry::_Internal::position(const AutonomyStatus_Telemetry* msg) {
  return *msg->_impl_.position_;
}
AutonomyStatus_Telemetry::AutonomyStatus_Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MissionModule.AutonomyStatus.Telemetry)
}
AutonomyStatus_Telemetry::AutonomyStatus_Telemetry(const AutonomyStatus_Telemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutonomyStatus_Telemetry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.fuel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::MissionModule::Position(*from._impl_.position_);
  }
  ::memcpy(&_impl_.speed_, &from._impl_.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fuel_) -
    reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.fuel_));
  // @@protoc_insertion_point(copy_constructor:MissionModule.AutonomyStatus.Telemetry)
}

inline void AutonomyStatus_Telemetry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.fuel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AutonomyStatus_Telemetry::~AutonomyStatus_Telemetry() {
  // @@protoc_insertion_point(destructor:MissionModule.AutonomyStatus.Telemetry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutonomyStatus_Telemetry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void AutonomyStatus_Telemetry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutonomyStatus_Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.AutonomyStatus.Telemetry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  ::memset(&_impl_.speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fuel_) -
      reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.fuel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutonomyStatus_Telemetry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fuel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.fuel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .MissionModule.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutonomyStatus_Telemetry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.AutonomyStatus.Telemetry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // double fuel = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = this->_internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_fuel(), target);
  }

  // .MissionModule.Position position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.AutonomyStatus.Telemetry)
  return target;
}

size_t AutonomyStatus_Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.AutonomyStatus.Telemetry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MissionModule.Position position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // double speed = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  // double fuel = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = this->_internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutonomyStatus_Telemetry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutonomyStatus_Telemetry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutonomyStatus_Telemetry::GetClassData() const { return &_class_data_; }


void AutonomyStatus_Telemetry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutonomyStatus_Telemetry*>(&to_msg);
  auto& from = static_cast<const AutonomyStatus_Telemetry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.AutonomyStatus.Telemetry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::MissionModule::Position::MergeFrom(
        from._internal_position());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fuel = from._internal_fuel();
  uint64_t raw_fuel;
  memcpy(&raw_fuel, &tmp_fuel, sizeof(tmp_fuel));
  if (raw_fuel != 0) {
    _this->_internal_set_fuel(from._internal_fuel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutonomyStatus_Telemetry::CopyFrom(const AutonomyStatus_Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.AutonomyStatus.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyStatus_Telemetry::IsInitialized() const {
  return true;
}

void AutonomyStatus_Telemetry::InternalSwap(AutonomyStatus_Telemetry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutonomyStatus_Telemetry, _impl_.fuel_)
      + sizeof(AutonomyStatus_Telemetry::_impl_.fuel_)
      - PROTOBUF_FIELD_OFFSET(AutonomyStatus_Telemetry, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutonomyStatus_Telemetry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[0]);
}

// ===================================================================

class AutonomyStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<AutonomyStatus>()._impl_._has_bits_);
  static const ::MissionModule::AutonomyStatus_Telemetry& telemetry(const AutonomyStatus* msg);
  static const ::MissionModule::Station& nextstop(const AutonomyStatus* msg);
  static void set_has_nextstop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::MissionModule::AutonomyStatus_Telemetry&
AutonomyStatus::_Internal::telemetry(const AutonomyStatus* msg) {
  return *msg->_impl_.telemetry_;
}
const ::MissionModule::Station&
AutonomyStatus::_Internal::nextstop(const AutonomyStatus* msg) {
  return *msg->_impl_.nextstop_;
}
AutonomyStatus::AutonomyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MissionModule.AutonomyStatus)
}
AutonomyStatus::AutonomyStatus(const AutonomyStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutonomyStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.telemetry_){nullptr}
    , decltype(_impl_.nextstop_){nullptr}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry()) {
    _this->_impl_.telemetry_ = new ::MissionModule::AutonomyStatus_Telemetry(*from._impl_.telemetry_);
  }
  if (from._internal_has_nextstop()) {
    _this->_impl_.nextstop_ = new ::MissionModule::Station(*from._impl_.nextstop_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:MissionModule.AutonomyStatus)
}

inline void AutonomyStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.telemetry_){nullptr}
    , decltype(_impl_.nextstop_){nullptr}
    , decltype(_impl_.state_){0}
  };
}

AutonomyStatus::~AutonomyStatus() {
  // @@protoc_insertion_point(destructor:MissionModule.AutonomyStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutonomyStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.telemetry_;
  if (this != internal_default_instance()) delete _impl_.nextstop_;
}

void AutonomyStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutonomyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.AutonomyStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.telemetry_ != nullptr) {
    delete _impl_.telemetry_;
  }
  _impl_.telemetry_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.nextstop_ != nullptr);
    _impl_.nextstop_->Clear();
  }
  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutonomyStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MissionModule.AutonomyStatus.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::MissionModule::AutonomyStatus_State>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .MissionModule.Station nextStop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nextstop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutonomyStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.AutonomyStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
  if (this->_internal_has_telemetry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::telemetry(this),
        _Internal::telemetry(this).GetCachedSize(), target, stream);
  }

  // .MissionModule.AutonomyStatus.State state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // optional .MissionModule.Station nextStop = 3;
  if (_internal_has_nextstop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nextstop(this),
        _Internal::nextstop(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.AutonomyStatus)
  return target;
}

size_t AutonomyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.AutonomyStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
  if (this->_internal_has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.telemetry_);
  }

  // optional .MissionModule.Station nextStop = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nextstop_);
  }

  // .MissionModule.AutonomyStatus.State state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutonomyStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutonomyStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutonomyStatus::GetClassData() const { return &_class_data_; }


void AutonomyStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutonomyStatus*>(&to_msg);
  auto& from = static_cast<const AutonomyStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.AutonomyStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_telemetry()) {
    _this->_internal_mutable_telemetry()->::MissionModule::AutonomyStatus_Telemetry::MergeFrom(
        from._internal_telemetry());
  }
  if (from._internal_has_nextstop()) {
    _this->_internal_mutable_nextstop()->::MissionModule::Station::MergeFrom(
        from._internal_nextstop());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutonomyStatus::CopyFrom(const AutonomyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.AutonomyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyStatus::IsInitialized() const {
  return true;
}

void AutonomyStatus::InternalSwap(AutonomyStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutonomyStatus, _impl_.state_)
      + sizeof(AutonomyStatus::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(AutonomyStatus, _impl_.telemetry_)>(
          reinterpret_cast<char*>(&_impl_.telemetry_),
          reinterpret_cast<char*>(&other->_impl_.telemetry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutonomyStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[1]);
}

// ===================================================================

class AutonomyCommand::_Internal {
 public:
};

AutonomyCommand::AutonomyCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MissionModule.AutonomyCommand)
}
AutonomyCommand::AutonomyCommand(const AutonomyCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutonomyCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){from._impl_.stops_}
    , decltype(_impl_.route_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.route_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route().empty()) {
    _this->_impl_.route_.Set(from._internal_route(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:MissionModule.AutonomyCommand)
}

inline void AutonomyCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){arena}
    , decltype(_impl_.route_){}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.route_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutonomyCommand::~AutonomyCommand() {
  // @@protoc_insertion_point(destructor:MissionModule.AutonomyCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutonomyCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_.~RepeatedPtrField();
  _impl_.route_.Destroy();
}

void AutonomyCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutonomyCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.AutonomyCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_.Clear();
  _impl_.route_.ClearToEmpty();
  _impl_.action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutonomyCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MissionModule.Station stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_route();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MissionModule.AutonomyCommand.route"));
        } else
          goto handle_unusual;
        continue;
      // .MissionModule.AutonomyCommand.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::MissionModule::AutonomyCommand_Action>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutonomyCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.AutonomyCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MissionModule.Station stops = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string route = 2;
  if (!this->_internal_route().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route().data(), static_cast<int>(this->_internal_route().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MissionModule.AutonomyCommand.route");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_route(), target);
  }

  // .MissionModule.AutonomyCommand.Action action = 3;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.AutonomyCommand)
  return target;
}

size_t AutonomyCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.AutonomyCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MissionModule.Station stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->_impl_.stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string route = 2;
  if (!this->_internal_route().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route());
  }

  // .MissionModule.AutonomyCommand.Action action = 3;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutonomyCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutonomyCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutonomyCommand::GetClassData() const { return &_class_data_; }


void AutonomyCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutonomyCommand*>(&to_msg);
  auto& from = static_cast<const AutonomyCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.AutonomyCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  if (!from._internal_route().empty()) {
    _this->_internal_set_route(from._internal_route());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutonomyCommand::CopyFrom(const AutonomyCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.AutonomyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyCommand::IsInitialized() const {
  return true;
}

void AutonomyCommand::InternalSwap(AutonomyCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_, lhs_arena,
      &other->_impl_.route_, rhs_arena
  );
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutonomyCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[2]);
}

// ===================================================================

class AutonomyError::_Internal {
 public:
};

AutonomyError::AutonomyError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MissionModule.AutonomyError)
}
AutonomyError::AutonomyError(const AutonomyError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutonomyError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.finishedstops_){from._impl_.finishedstops_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MissionModule.AutonomyError)
}

inline void AutonomyError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.finishedstops_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AutonomyError::~AutonomyError() {
  // @@protoc_insertion_point(destructor:MissionModule.AutonomyError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutonomyError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.finishedstops_.~RepeatedPtrField();
}

void AutonomyError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutonomyError::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.AutonomyError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.finishedstops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutonomyError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MissionModule.Station finishedStops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_finishedstops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutonomyError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.AutonomyError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MissionModule.Station finishedStops = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_finishedstops_size()); i < n; i++) {
    const auto& repfield = this->_internal_finishedstops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.AutonomyError)
  return target;
}

size_t AutonomyError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.AutonomyError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MissionModule.Station finishedStops = 1;
  total_size += 1UL * this->_internal_finishedstops_size();
  for (const auto& msg : this->_impl_.finishedstops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutonomyError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutonomyError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutonomyError::GetClassData() const { return &_class_data_; }


void AutonomyError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutonomyError*>(&to_msg);
  auto& from = static_cast<const AutonomyError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.AutonomyError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.finishedstops_.MergeFrom(from._impl_.finishedstops_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutonomyError::CopyFrom(const AutonomyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.AutonomyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyError::IsInitialized() const {
  return true;
}

void AutonomyError::InternalSwap(AutonomyError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.finishedstops_.InternalSwap(&other->_impl_.finishedstops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutonomyError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[3]);
}

// ===================================================================

class Station::_Internal {
 public:
  static const ::MissionModule::Position& position(const Station* msg);
};

const ::MissionModule::Position&
Station::_Internal::position(const Station* msg) {
  return *msg->_impl_.position_;
}
Station::Station(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MissionModule.Station)
}
Station::Station(const Station& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Station* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::MissionModule::Position(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:MissionModule.Station)
}

inline void Station::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Station::~Station() {
  // @@protoc_insertion_point(destructor:MissionModule.Station)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Station::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
}

void Station::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Station::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.Station)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Station::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MissionModule.Station.name"));
        } else
          goto handle_unusual;
        continue;
      // .MissionModule.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Station::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.Station)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MissionModule.Station.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .MissionModule.Position position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.Station)
  return target;
}

size_t Station::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.Station)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .MissionModule.Position position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Station::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Station::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Station::GetClassData() const { return &_class_data_; }


void Station::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Station*>(&to_msg);
  auto& from = static_cast<const Station&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.Station)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::MissionModule::Position::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Station::CopyFrom(const Station& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.Station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Station::IsInitialized() const {
  return true;
}

void Station::InternalSwap(Station* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Station::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[4]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MissionModule.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.altitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.altitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.altitude_));
  // @@protoc_insertion_point(copy_constructor:MissionModule.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.altitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:MissionModule.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.altitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double altitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = from._internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _this->_internal_set_altitude(from._internal_altitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.altitude_)
      + sizeof(Position::_impl_.altitude_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MissionModule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MissionModule::AutonomyStatus_Telemetry*
Arena::CreateMaybeMessage< ::MissionModule::AutonomyStatus_Telemetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::AutonomyStatus_Telemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::AutonomyStatus*
Arena::CreateMaybeMessage< ::MissionModule::AutonomyStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::AutonomyStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::AutonomyCommand*
Arena::CreateMaybeMessage< ::MissionModule::AutonomyCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::AutonomyCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::AutonomyError*
Arena::CreateMaybeMessage< ::MissionModule::AutonomyError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::AutonomyError >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::Station*
Arena::CreateMaybeMessage< ::MissionModule::Station >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::Station >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::Position*
Arena::CreateMaybeMessage< ::MissionModule::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::Position >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
