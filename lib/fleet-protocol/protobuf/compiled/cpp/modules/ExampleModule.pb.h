// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ExampleModule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fExampleModule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fExampleModule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fExampleModule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fExampleModule_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fExampleModule_2eproto;
namespace ExampleModule {
class BlinkerCommand;
struct BlinkerCommandDefaultTypeInternal;
extern BlinkerCommandDefaultTypeInternal _BlinkerCommand_default_instance_;
class BlinkerError;
struct BlinkerErrorDefaultTypeInternal;
extern BlinkerErrorDefaultTypeInternal _BlinkerError_default_instance_;
class BlinkerStatus;
struct BlinkerStatusDefaultTypeInternal;
extern BlinkerStatusDefaultTypeInternal _BlinkerStatus_default_instance_;
class LightsCommand;
struct LightsCommandDefaultTypeInternal;
extern LightsCommandDefaultTypeInternal _LightsCommand_default_instance_;
class LightsError;
struct LightsErrorDefaultTypeInternal;
extern LightsErrorDefaultTypeInternal _LightsError_default_instance_;
class LightsStatus;
struct LightsStatusDefaultTypeInternal;
extern LightsStatusDefaultTypeInternal _LightsStatus_default_instance_;
}  // namespace ExampleModule
PROTOBUF_NAMESPACE_OPEN
template<> ::ExampleModule::BlinkerCommand* Arena::CreateMaybeMessage<::ExampleModule::BlinkerCommand>(Arena*);
template<> ::ExampleModule::BlinkerError* Arena::CreateMaybeMessage<::ExampleModule::BlinkerError>(Arena*);
template<> ::ExampleModule::BlinkerStatus* Arena::CreateMaybeMessage<::ExampleModule::BlinkerStatus>(Arena*);
template<> ::ExampleModule::LightsCommand* Arena::CreateMaybeMessage<::ExampleModule::LightsCommand>(Arena*);
template<> ::ExampleModule::LightsError* Arena::CreateMaybeMessage<::ExampleModule::LightsError>(Arena*);
template<> ::ExampleModule::LightsStatus* Arena::CreateMaybeMessage<::ExampleModule::LightsStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ExampleModule {

enum BlinkerCommand_Command : int {
  BlinkerCommand_Command_TURN_ON = 0,
  BlinkerCommand_Command_TURN_OFF = 1,
  BlinkerCommand_Command_BlinkerCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BlinkerCommand_Command_BlinkerCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BlinkerCommand_Command_IsValid(int value);
constexpr BlinkerCommand_Command BlinkerCommand_Command_Command_MIN = BlinkerCommand_Command_TURN_ON;
constexpr BlinkerCommand_Command BlinkerCommand_Command_Command_MAX = BlinkerCommand_Command_TURN_OFF;
constexpr int BlinkerCommand_Command_Command_ARRAYSIZE = BlinkerCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlinkerCommand_Command_descriptor();
template<typename T>
inline const std::string& BlinkerCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlinkerCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlinkerCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlinkerCommand_Command_descriptor(), enum_t_value);
}
inline bool BlinkerCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlinkerCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlinkerCommand_Command>(
    BlinkerCommand_Command_descriptor(), name, value);
}
enum LightsCommand_Command : int {
  LightsCommand_Command_PRESS = 0,
  LightsCommand_Command_LightsCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LightsCommand_Command_LightsCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LightsCommand_Command_IsValid(int value);
constexpr LightsCommand_Command LightsCommand_Command_Command_MIN = LightsCommand_Command_PRESS;
constexpr LightsCommand_Command LightsCommand_Command_Command_MAX = LightsCommand_Command_PRESS;
constexpr int LightsCommand_Command_Command_ARRAYSIZE = LightsCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightsCommand_Command_descriptor();
template<typename T>
inline const std::string& LightsCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightsCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightsCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightsCommand_Command_descriptor(), enum_t_value);
}
inline bool LightsCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LightsCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightsCommand_Command>(
    LightsCommand_Command_descriptor(), name, value);
}
// ===================================================================

class BlinkerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.BlinkerStatus) */ {
 public:
  inline BlinkerStatus() : BlinkerStatus(nullptr) {}
  ~BlinkerStatus() override;
  explicit PROTOBUF_CONSTEXPR BlinkerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlinkerStatus(const BlinkerStatus& from);
  BlinkerStatus(BlinkerStatus&& from) noexcept
    : BlinkerStatus() {
    *this = ::std::move(from);
  }

  inline BlinkerStatus& operator=(const BlinkerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlinkerStatus& operator=(BlinkerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlinkerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlinkerStatus* internal_default_instance() {
    return reinterpret_cast<const BlinkerStatus*>(
               &_BlinkerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlinkerStatus& a, BlinkerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BlinkerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlinkerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlinkerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlinkerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlinkerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlinkerStatus& from) {
    BlinkerStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlinkerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.BlinkerStatus";
  }
  protected:
  explicit BlinkerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsFlashingFieldNumber = 1,
  };
  // bool isFlashing = 1;
  void clear_isflashing();
  bool isflashing() const;
  void set_isflashing(bool value);
  private:
  bool _internal_isflashing() const;
  void _internal_set_isflashing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.BlinkerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool isflashing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class LightsStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.LightsStatus) */ {
 public:
  inline LightsStatus() : LightsStatus(nullptr) {}
  ~LightsStatus() override;
  explicit PROTOBUF_CONSTEXPR LightsStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightsStatus(const LightsStatus& from);
  LightsStatus(LightsStatus&& from) noexcept
    : LightsStatus() {
    *this = ::std::move(from);
  }

  inline LightsStatus& operator=(const LightsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightsStatus& operator=(LightsStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightsStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightsStatus* internal_default_instance() {
    return reinterpret_cast<const LightsStatus*>(
               &_LightsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LightsStatus& a, LightsStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LightsStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightsStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightsStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightsStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightsStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LightsStatus& from) {
    LightsStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightsStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.LightsStatus";
  }
  protected:
  explicit LightsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOnFieldNumber = 1,
  };
  // bool isOn = 1;
  void clear_ison();
  bool ison() const;
  void set_ison(bool value);
  private:
  bool _internal_ison() const;
  void _internal_set_ison(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.LightsStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ison_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class BlinkerCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.BlinkerCommand) */ {
 public:
  inline BlinkerCommand() : BlinkerCommand(nullptr) {}
  ~BlinkerCommand() override;
  explicit PROTOBUF_CONSTEXPR BlinkerCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlinkerCommand(const BlinkerCommand& from);
  BlinkerCommand(BlinkerCommand&& from) noexcept
    : BlinkerCommand() {
    *this = ::std::move(from);
  }

  inline BlinkerCommand& operator=(const BlinkerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlinkerCommand& operator=(BlinkerCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlinkerCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlinkerCommand* internal_default_instance() {
    return reinterpret_cast<const BlinkerCommand*>(
               &_BlinkerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlinkerCommand& a, BlinkerCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(BlinkerCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlinkerCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlinkerCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlinkerCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlinkerCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlinkerCommand& from) {
    BlinkerCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlinkerCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.BlinkerCommand";
  }
  protected:
  explicit BlinkerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BlinkerCommand_Command Command;
  static constexpr Command TURN_ON =
    BlinkerCommand_Command_TURN_ON;
  static constexpr Command TURN_OFF =
    BlinkerCommand_Command_TURN_OFF;
  static inline bool Command_IsValid(int value) {
    return BlinkerCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    BlinkerCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    BlinkerCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    BlinkerCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return BlinkerCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return BlinkerCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return BlinkerCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .ExampleModule.BlinkerCommand.Command command = 1;
  void clear_command();
  ::ExampleModule::BlinkerCommand_Command command() const;
  void set_command(::ExampleModule::BlinkerCommand_Command value);
  private:
  ::ExampleModule::BlinkerCommand_Command _internal_command() const;
  void _internal_set_command(::ExampleModule::BlinkerCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.BlinkerCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class LightsCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.LightsCommand) */ {
 public:
  inline LightsCommand() : LightsCommand(nullptr) {}
  ~LightsCommand() override;
  explicit PROTOBUF_CONSTEXPR LightsCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightsCommand(const LightsCommand& from);
  LightsCommand(LightsCommand&& from) noexcept
    : LightsCommand() {
    *this = ::std::move(from);
  }

  inline LightsCommand& operator=(const LightsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightsCommand& operator=(LightsCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightsCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightsCommand* internal_default_instance() {
    return reinterpret_cast<const LightsCommand*>(
               &_LightsCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LightsCommand& a, LightsCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(LightsCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightsCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightsCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightsCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightsCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LightsCommand& from) {
    LightsCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightsCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.LightsCommand";
  }
  protected:
  explicit LightsCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LightsCommand_Command Command;
  static constexpr Command PRESS =
    LightsCommand_Command_PRESS;
  static inline bool Command_IsValid(int value) {
    return LightsCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    LightsCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    LightsCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    LightsCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return LightsCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return LightsCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return LightsCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .ExampleModule.LightsCommand.Command command = 1;
  void clear_command();
  ::ExampleModule::LightsCommand_Command command() const;
  void set_command(::ExampleModule::LightsCommand_Command value);
  private:
  ::ExampleModule::LightsCommand_Command _internal_command() const;
  void _internal_set_command(::ExampleModule::LightsCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.LightsCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class BlinkerError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.BlinkerError) */ {
 public:
  inline BlinkerError() : BlinkerError(nullptr) {}
  ~BlinkerError() override;
  explicit PROTOBUF_CONSTEXPR BlinkerError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlinkerError(const BlinkerError& from);
  BlinkerError(BlinkerError&& from) noexcept
    : BlinkerError() {
    *this = ::std::move(from);
  }

  inline BlinkerError& operator=(const BlinkerError& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlinkerError& operator=(BlinkerError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlinkerError& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlinkerError* internal_default_instance() {
    return reinterpret_cast<const BlinkerError*>(
               &_BlinkerError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlinkerError& a, BlinkerError& b) {
    a.Swap(&b);
  }
  inline void Swap(BlinkerError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlinkerError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlinkerError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlinkerError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlinkerError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlinkerError& from) {
    BlinkerError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlinkerError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.BlinkerError";
  }
  protected:
  explicit BlinkerError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.BlinkerError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class LightsError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.LightsError) */ {
 public:
  inline LightsError() : LightsError(nullptr) {}
  ~LightsError() override;
  explicit PROTOBUF_CONSTEXPR LightsError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightsError(const LightsError& from);
  LightsError(LightsError&& from) noexcept
    : LightsError() {
    *this = ::std::move(from);
  }

  inline LightsError& operator=(const LightsError& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightsError& operator=(LightsError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightsError& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightsError* internal_default_instance() {
    return reinterpret_cast<const LightsError*>(
               &_LightsError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LightsError& a, LightsError& b) {
    a.Swap(&b);
  }
  inline void Swap(LightsError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightsError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightsError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightsError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightsError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LightsError& from) {
    LightsError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightsError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.LightsError";
  }
  protected:
  explicit LightsError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.LightsError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlinkerStatus

// bool isFlashing = 1;
inline void BlinkerStatus::clear_isflashing() {
  _impl_.isflashing_ = false;
}
inline bool BlinkerStatus::_internal_isflashing() const {
  return _impl_.isflashing_;
}
inline bool BlinkerStatus::isflashing() const {
  // @@protoc_insertion_point(field_get:ExampleModule.BlinkerStatus.isFlashing)
  return _internal_isflashing();
}
inline void BlinkerStatus::_internal_set_isflashing(bool value) {
  
  _impl_.isflashing_ = value;
}
inline void BlinkerStatus::set_isflashing(bool value) {
  _internal_set_isflashing(value);
  // @@protoc_insertion_point(field_set:ExampleModule.BlinkerStatus.isFlashing)
}

// -------------------------------------------------------------------

// LightsStatus

// bool isOn = 1;
inline void LightsStatus::clear_ison() {
  _impl_.ison_ = false;
}
inline bool LightsStatus::_internal_ison() const {
  return _impl_.ison_;
}
inline bool LightsStatus::ison() const {
  // @@protoc_insertion_point(field_get:ExampleModule.LightsStatus.isOn)
  return _internal_ison();
}
inline void LightsStatus::_internal_set_ison(bool value) {
  
  _impl_.ison_ = value;
}
inline void LightsStatus::set_ison(bool value) {
  _internal_set_ison(value);
  // @@protoc_insertion_point(field_set:ExampleModule.LightsStatus.isOn)
}

// -------------------------------------------------------------------

// BlinkerCommand

// .ExampleModule.BlinkerCommand.Command command = 1;
inline void BlinkerCommand::clear_command() {
  _impl_.command_ = 0;
}
inline ::ExampleModule::BlinkerCommand_Command BlinkerCommand::_internal_command() const {
  return static_cast< ::ExampleModule::BlinkerCommand_Command >(_impl_.command_);
}
inline ::ExampleModule::BlinkerCommand_Command BlinkerCommand::command() const {
  // @@protoc_insertion_point(field_get:ExampleModule.BlinkerCommand.command)
  return _internal_command();
}
inline void BlinkerCommand::_internal_set_command(::ExampleModule::BlinkerCommand_Command value) {
  
  _impl_.command_ = value;
}
inline void BlinkerCommand::set_command(::ExampleModule::BlinkerCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ExampleModule.BlinkerCommand.command)
}

// -------------------------------------------------------------------

// LightsCommand

// .ExampleModule.LightsCommand.Command command = 1;
inline void LightsCommand::clear_command() {
  _impl_.command_ = 0;
}
inline ::ExampleModule::LightsCommand_Command LightsCommand::_internal_command() const {
  return static_cast< ::ExampleModule::LightsCommand_Command >(_impl_.command_);
}
inline ::ExampleModule::LightsCommand_Command LightsCommand::command() const {
  // @@protoc_insertion_point(field_get:ExampleModule.LightsCommand.command)
  return _internal_command();
}
inline void LightsCommand::_internal_set_command(::ExampleModule::LightsCommand_Command value) {
  
  _impl_.command_ = value;
}
inline void LightsCommand::set_command(::ExampleModule::LightsCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ExampleModule.LightsCommand.command)
}

// -------------------------------------------------------------------

// BlinkerError

// string errorMessage = 1;
inline void BlinkerError::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& BlinkerError::errormessage() const {
  // @@protoc_insertion_point(field_get:ExampleModule.BlinkerError.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlinkerError::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExampleModule.BlinkerError.errorMessage)
}
inline std::string* BlinkerError::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ExampleModule.BlinkerError.errorMessage)
  return _s;
}
inline const std::string& BlinkerError::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void BlinkerError::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* BlinkerError::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* BlinkerError::release_errormessage() {
  // @@protoc_insertion_point(field_release:ExampleModule.BlinkerError.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void BlinkerError::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExampleModule.BlinkerError.errorMessage)
}

// -------------------------------------------------------------------

// LightsError

// string errorMessage = 1;
inline void LightsError::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& LightsError::errormessage() const {
  // @@protoc_insertion_point(field_get:ExampleModule.LightsError.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LightsError::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExampleModule.LightsError.errorMessage)
}
inline std::string* LightsError::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ExampleModule.LightsError.errorMessage)
  return _s;
}
inline const std::string& LightsError::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void LightsError::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* LightsError::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* LightsError::release_errormessage() {
  // @@protoc_insertion_point(field_release:ExampleModule.LightsError.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void LightsError::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExampleModule.LightsError.errorMessage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ExampleModule

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ExampleModule::BlinkerCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExampleModule::BlinkerCommand_Command>() {
  return ::ExampleModule::BlinkerCommand_Command_descriptor();
}
template <> struct is_proto_enum< ::ExampleModule::LightsCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExampleModule::LightsCommand_Command>() {
  return ::ExampleModule::LightsCommand_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fExampleModule_2eproto
