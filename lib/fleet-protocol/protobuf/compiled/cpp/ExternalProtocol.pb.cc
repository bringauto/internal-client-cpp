// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternalProtocol.proto

#include "ExternalProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ExternalProtocol {
PROTOBUF_CONSTEXPR ExternalServer::ExternalServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.MessageType_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ExternalServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalServerDefaultTypeInternal() {}
  union {
    ExternalServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalServerDefaultTypeInternal _ExternalServer_default_instance_;
PROTOBUF_CONSTEXPR ExternalClient::ExternalClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.MessageType_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ExternalClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalClientDefaultTypeInternal() {}
  union {
    ExternalClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalClientDefaultTypeInternal _ExternalClient_default_instance_;
PROTOBUF_CONSTEXPR Connect::Connect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.company_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vehiclename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectDefaultTypeInternal() {}
  union {
    Connect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectDefaultTypeInternal _Connect_default_instance_;
PROTOBUF_CONSTEXPR ConnectResponse::ConnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectResponseDefaultTypeInternal() {}
  union {
    ConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicestatus_)*/nullptr
  , /*decltype(_impl_.devicestate_)*/0
  , /*decltype(_impl_.messagecounter_)*/0u} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_CONSTEXPR StatusResponse::StatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.messagecounter_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicecommand_)*/nullptr
  , /*decltype(_impl_.messagecounter_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
PROTOBUF_CONSTEXPR CommandResponse::CommandResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.messagecounter_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandResponseDefaultTypeInternal() {}
  union {
    CommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
}  // namespace ExternalProtocol
static ::_pb::Metadata file_level_metadata_ExternalProtocol_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ExternalProtocol_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ExternalProtocol_2eproto = nullptr;

const uint32_t TableStruct_ExternalProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ExternalServer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ExternalServer, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ExternalServer, _impl_.MessageType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ExternalClient, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ExternalClient, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ExternalClient, _impl_.MessageType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Connect, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Connect, _impl_.company_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Connect, _impl_.vehiclename_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Connect, _impl_.devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ConnectResponse, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::ConnectResponse, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Status, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Status, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Status, _impl_.devicestate_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Status, _impl_.messagecounter_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Status, _impl_.devicestatus_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Status, _impl_.errormessage_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::StatusResponse, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::StatusResponse, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::StatusResponse, _impl_.messagecounter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Command, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Command, _impl_.messagecounter_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::Command, _impl_.devicecommand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::CommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::CommandResponse, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::CommandResponse, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ExternalProtocol::CommandResponse, _impl_.messagecounter_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ExternalProtocol::ExternalServer)},
  { 10, -1, -1, sizeof(::ExternalProtocol::ExternalClient)},
  { 20, -1, -1, sizeof(::ExternalProtocol::Connect)},
  { 30, -1, -1, sizeof(::ExternalProtocol::ConnectResponse)},
  { 38, 49, -1, sizeof(::ExternalProtocol::Status)},
  { 54, -1, -1, sizeof(::ExternalProtocol::StatusResponse)},
  { 63, -1, -1, sizeof(::ExternalProtocol::Command)},
  { 72, -1, -1, sizeof(::ExternalProtocol::CommandResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ExternalProtocol::_ExternalServer_default_instance_._instance,
  &::ExternalProtocol::_ExternalClient_default_instance_._instance,
  &::ExternalProtocol::_Connect_default_instance_._instance,
  &::ExternalProtocol::_ConnectResponse_default_instance_._instance,
  &::ExternalProtocol::_Status_default_instance_._instance,
  &::ExternalProtocol::_StatusResponse_default_instance_._instance,
  &::ExternalProtocol::_Command_default_instance_._instance,
  &::ExternalProtocol::_CommandResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ExternalProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026ExternalProtocol.proto\022\020ExternalProtoc"
  "ol\032\026InternalProtocol.proto\"\307\001\n\016ExternalS"
  "erver\022<\n\017connectResponse\030\001 \001(\0132!.Externa"
  "lProtocol.ConnectResponseH\000\022:\n\016statusRes"
  "ponse\030\002 \001(\0132 .ExternalProtocol.StatusRes"
  "ponseH\000\022,\n\007command\030\003 \001(\0132\031.ExternalProto"
  "col.CommandH\000B\r\n\013MessageType\"\267\001\n\016Externa"
  "lClient\022,\n\007connect\030\001 \001(\0132\031.ExternalProto"
  "col.ConnectH\000\022*\n\006status\030\002 \001(\0132\030.External"
  "Protocol.StatusH\000\022<\n\017commandResponse\030\003 \001"
  "(\0132!.ExternalProtocol.CommandResponseH\000B"
  "\r\n\013MessageType\"m\n\007Connect\022\021\n\tsessionId\030\001"
  " \001(\t\022\017\n\007company\030\002 \001(\t\022\023\n\013vehicleName\030\003 \001"
  "(\t\022)\n\007devices\030\004 \003(\0132\030.InternalProtocol.D"
  "evice\"~\n\017ConnectResponse\022\021\n\tsessionId\030\001 "
  "\001(\t\0224\n\004type\030\002 \001(\0162&.ExternalProtocol.Con"
  "nectResponse.Type\"\"\n\004Type\022\006\n\002OK\020\000\022\022\n\016ALR"
  "EADY_LOGGED\020\001\"\227\002\n\006Status\022\021\n\tsessionId\030\001 "
  "\001(\t\0229\n\013deviceState\030\002 \001(\0162$.ExternalProto"
  "col.Status.DeviceState\022\026\n\016messageCounter"
  "\030\003 \001(\r\0224\n\014deviceStatus\030\004 \001(\0132\036.InternalP"
  "rotocol.DeviceStatus\022\031\n\014errorMessage\030\005 \001"
  "(\014H\000\210\001\001\"E\n\013DeviceState\022\016\n\nCONNECTING\020\000\022\013"
  "\n\007RUNNING\020\001\022\t\n\005ERROR\020\002\022\016\n\nDISCONNECT\020\003B\017"
  "\n\r_errorMessage\"\200\001\n\016StatusResponse\022\021\n\tse"
  "ssionId\030\001 \001(\t\0223\n\004type\030\002 \001(\0162%.ExternalPr"
  "otocol.StatusResponse.Type\022\026\n\016messageCou"
  "nter\030\003 \001(\r\"\016\n\004Type\022\006\n\002OK\020\000\"l\n\007Command\022\021\n"
  "\tsessionId\030\001 \001(\t\022\026\n\016messageCounter\030\002 \001(\r"
  "\0226\n\rdeviceCommand\030\003 \001(\0132\037.InternalProtoc"
  "ol.DeviceCommand\"\313\001\n\017CommandResponse\022\021\n\t"
  "sessionId\030\001 \001(\t\0224\n\004type\030\002 \001(\0162&.External"
  "Protocol.CommandResponse.Type\022\026\n\016message"
  "Counter\030\003 \001(\r\"W\n\004Type\022\006\n\002OK\020\000\022\030\n\024DEVICE_"
  "NOT_CONNECTED\020\001\022\030\n\024DEVICE_NOT_SUPPORTED\020"
  "\002\022\023\n\017INVALID_COMMAND\020\003B>Z!../internal/pk"
  "g/ba_proto;ba_proto\252\002\030Google.Protobuf.ba"
  "_protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ExternalProtocol_2eproto_deps[1] = {
  &::descriptor_table_InternalProtocol_2eproto,
};
static ::_pbi::once_flag descriptor_table_ExternalProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ExternalProtocol_2eproto = {
    false, false, 1494, descriptor_table_protodef_ExternalProtocol_2eproto,
    "ExternalProtocol.proto",
    &descriptor_table_ExternalProtocol_2eproto_once, descriptor_table_ExternalProtocol_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_ExternalProtocol_2eproto::offsets,
    file_level_metadata_ExternalProtocol_2eproto, file_level_enum_descriptors_ExternalProtocol_2eproto,
    file_level_service_descriptors_ExternalProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ExternalProtocol_2eproto_getter() {
  return &descriptor_table_ExternalProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ExternalProtocol_2eproto(&descriptor_table_ExternalProtocol_2eproto);
namespace ExternalProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectResponse_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ExternalProtocol_2eproto);
  return file_level_enum_descriptors_ExternalProtocol_2eproto[0];
}
bool ConnectResponse_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ConnectResponse_Type ConnectResponse::OK;
constexpr ConnectResponse_Type ConnectResponse::ALREADY_LOGGED;
constexpr ConnectResponse_Type ConnectResponse::Type_MIN;
constexpr ConnectResponse_Type ConnectResponse::Type_MAX;
constexpr int ConnectResponse::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_DeviceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ExternalProtocol_2eproto);
  return file_level_enum_descriptors_ExternalProtocol_2eproto[1];
}
bool Status_DeviceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Status_DeviceState Status::CONNECTING;
constexpr Status_DeviceState Status::RUNNING;
constexpr Status_DeviceState Status::ERROR;
constexpr Status_DeviceState Status::DISCONNECT;
constexpr Status_DeviceState Status::DeviceState_MIN;
constexpr Status_DeviceState Status::DeviceState_MAX;
constexpr int Status::DeviceState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusResponse_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ExternalProtocol_2eproto);
  return file_level_enum_descriptors_ExternalProtocol_2eproto[2];
}
bool StatusResponse_Type_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StatusResponse_Type StatusResponse::OK;
constexpr StatusResponse_Type StatusResponse::Type_MIN;
constexpr StatusResponse_Type StatusResponse::Type_MAX;
constexpr int StatusResponse::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandResponse_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ExternalProtocol_2eproto);
  return file_level_enum_descriptors_ExternalProtocol_2eproto[3];
}
bool CommandResponse_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CommandResponse_Type CommandResponse::OK;
constexpr CommandResponse_Type CommandResponse::DEVICE_NOT_CONNECTED;
constexpr CommandResponse_Type CommandResponse::DEVICE_NOT_SUPPORTED;
constexpr CommandResponse_Type CommandResponse::INVALID_COMMAND;
constexpr CommandResponse_Type CommandResponse::Type_MIN;
constexpr CommandResponse_Type CommandResponse::Type_MAX;
constexpr int CommandResponse::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ExternalServer::_Internal {
 public:
  static const ::ExternalProtocol::ConnectResponse& connectresponse(const ExternalServer* msg);
  static const ::ExternalProtocol::StatusResponse& statusresponse(const ExternalServer* msg);
  static const ::ExternalProtocol::Command& command(const ExternalServer* msg);
};

const ::ExternalProtocol::ConnectResponse&
ExternalServer::_Internal::connectresponse(const ExternalServer* msg) {
  return *msg->_impl_.MessageType_.connectresponse_;
}
const ::ExternalProtocol::StatusResponse&
ExternalServer::_Internal::statusresponse(const ExternalServer* msg) {
  return *msg->_impl_.MessageType_.statusresponse_;
}
const ::ExternalProtocol::Command&
ExternalServer::_Internal::command(const ExternalServer* msg) {
  return *msg->_impl_.MessageType_.command_;
}
void ExternalServer::set_allocated_connectresponse(::ExternalProtocol::ConnectResponse* connectresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MessageType();
  if (connectresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connectresponse);
    if (message_arena != submessage_arena) {
      connectresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connectresponse, submessage_arena);
    }
    set_has_connectresponse();
    _impl_.MessageType_.connectresponse_ = connectresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.ExternalServer.connectResponse)
}
void ExternalServer::set_allocated_statusresponse(::ExternalProtocol::StatusResponse* statusresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MessageType();
  if (statusresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(statusresponse);
    if (message_arena != submessage_arena) {
      statusresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statusresponse, submessage_arena);
    }
    set_has_statusresponse();
    _impl_.MessageType_.statusresponse_ = statusresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.ExternalServer.statusResponse)
}
void ExternalServer::set_allocated_command(::ExternalProtocol::Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MessageType();
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    set_has_command();
    _impl_.MessageType_.command_ = command;
  }
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.ExternalServer.command)
}
ExternalServer::ExternalServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExternalProtocol.ExternalServer)
}
ExternalServer::ExternalServer(const ExternalServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExternalServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.MessageType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_MessageType();
  switch (from.MessageType_case()) {
    case kConnectResponse: {
      _this->_internal_mutable_connectresponse()->::ExternalProtocol::ConnectResponse::MergeFrom(
          from._internal_connectresponse());
      break;
    }
    case kStatusResponse: {
      _this->_internal_mutable_statusresponse()->::ExternalProtocol::StatusResponse::MergeFrom(
          from._internal_statusresponse());
      break;
    }
    case kCommand: {
      _this->_internal_mutable_command()->::ExternalProtocol::Command::MergeFrom(
          from._internal_command());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ExternalProtocol.ExternalServer)
}

inline void ExternalServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.MessageType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_MessageType();
}

ExternalServer::~ExternalServer() {
  // @@protoc_insertion_point(destructor:ExternalProtocol.ExternalServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExternalServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_MessageType()) {
    clear_MessageType();
  }
}

void ExternalServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExternalServer::clear_MessageType() {
// @@protoc_insertion_point(one_of_clear_start:ExternalProtocol.ExternalServer)
  switch (MessageType_case()) {
    case kConnectResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MessageType_.connectresponse_;
      }
      break;
    }
    case kStatusResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MessageType_.statusresponse_;
      }
      break;
    }
    case kCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MessageType_.command_;
      }
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void ExternalServer::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternalProtocol.ExternalServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_MessageType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ExternalProtocol.ConnectResponse connectResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connectresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ExternalProtocol.StatusResponse statusResponse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statusresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ExternalProtocol.Command command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExternalServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExternalProtocol.ExternalServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ExternalProtocol.ConnectResponse connectResponse = 1;
  if (_internal_has_connectresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connectresponse(this),
        _Internal::connectresponse(this).GetCachedSize(), target, stream);
  }

  // .ExternalProtocol.StatusResponse statusResponse = 2;
  if (_internal_has_statusresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::statusresponse(this),
        _Internal::statusresponse(this).GetCachedSize(), target, stream);
  }

  // .ExternalProtocol.Command command = 3;
  if (_internal_has_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternalProtocol.ExternalServer)
  return target;
}

size_t ExternalServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternalProtocol.ExternalServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (MessageType_case()) {
    // .ExternalProtocol.ConnectResponse connectResponse = 1;
    case kConnectResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MessageType_.connectresponse_);
      break;
    }
    // .ExternalProtocol.StatusResponse statusResponse = 2;
    case kStatusResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MessageType_.statusresponse_);
      break;
    }
    // .ExternalProtocol.Command command = 3;
    case kCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MessageType_.command_);
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExternalServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalServer::GetClassData() const { return &_class_data_; }


void ExternalServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExternalServer*>(&to_msg);
  auto& from = static_cast<const ExternalServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExternalProtocol.ExternalServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.MessageType_case()) {
    case kConnectResponse: {
      _this->_internal_mutable_connectresponse()->::ExternalProtocol::ConnectResponse::MergeFrom(
          from._internal_connectresponse());
      break;
    }
    case kStatusResponse: {
      _this->_internal_mutable_statusresponse()->::ExternalProtocol::StatusResponse::MergeFrom(
          from._internal_statusresponse());
      break;
    }
    case kCommand: {
      _this->_internal_mutable_command()->::ExternalProtocol::Command::MergeFrom(
          from._internal_command());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalServer::CopyFrom(const ExternalServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternalProtocol.ExternalServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalServer::IsInitialized() const {
  return true;
}

void ExternalServer::InternalSwap(ExternalServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.MessageType_, other->_impl_.MessageType_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExternalProtocol_2eproto_getter, &descriptor_table_ExternalProtocol_2eproto_once,
      file_level_metadata_ExternalProtocol_2eproto[0]);
}

// ===================================================================

class ExternalClient::_Internal {
 public:
  static const ::ExternalProtocol::Connect& connect(const ExternalClient* msg);
  static const ::ExternalProtocol::Status& status(const ExternalClient* msg);
  static const ::ExternalProtocol::CommandResponse& commandresponse(const ExternalClient* msg);
};

const ::ExternalProtocol::Connect&
ExternalClient::_Internal::connect(const ExternalClient* msg) {
  return *msg->_impl_.MessageType_.connect_;
}
const ::ExternalProtocol::Status&
ExternalClient::_Internal::status(const ExternalClient* msg) {
  return *msg->_impl_.MessageType_.status_;
}
const ::ExternalProtocol::CommandResponse&
ExternalClient::_Internal::commandresponse(const ExternalClient* msg) {
  return *msg->_impl_.MessageType_.commandresponse_;
}
void ExternalClient::set_allocated_connect(::ExternalProtocol::Connect* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MessageType();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connect);
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    _impl_.MessageType_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.ExternalClient.connect)
}
void ExternalClient::set_allocated_status(::ExternalProtocol::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MessageType();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    _impl_.MessageType_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.ExternalClient.status)
}
void ExternalClient::set_allocated_commandresponse(::ExternalProtocol::CommandResponse* commandresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MessageType();
  if (commandresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commandresponse);
    if (message_arena != submessage_arena) {
      commandresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commandresponse, submessage_arena);
    }
    set_has_commandresponse();
    _impl_.MessageType_.commandresponse_ = commandresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.ExternalClient.commandResponse)
}
ExternalClient::ExternalClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExternalProtocol.ExternalClient)
}
ExternalClient::ExternalClient(const ExternalClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExternalClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.MessageType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_MessageType();
  switch (from.MessageType_case()) {
    case kConnect: {
      _this->_internal_mutable_connect()->::ExternalProtocol::Connect::MergeFrom(
          from._internal_connect());
      break;
    }
    case kStatus: {
      _this->_internal_mutable_status()->::ExternalProtocol::Status::MergeFrom(
          from._internal_status());
      break;
    }
    case kCommandResponse: {
      _this->_internal_mutable_commandresponse()->::ExternalProtocol::CommandResponse::MergeFrom(
          from._internal_commandresponse());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ExternalProtocol.ExternalClient)
}

inline void ExternalClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.MessageType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_MessageType();
}

ExternalClient::~ExternalClient() {
  // @@protoc_insertion_point(destructor:ExternalProtocol.ExternalClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExternalClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_MessageType()) {
    clear_MessageType();
  }
}

void ExternalClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExternalClient::clear_MessageType() {
// @@protoc_insertion_point(one_of_clear_start:ExternalProtocol.ExternalClient)
  switch (MessageType_case()) {
    case kConnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MessageType_.connect_;
      }
      break;
    }
    case kStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MessageType_.status_;
      }
      break;
    }
    case kCommandResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MessageType_.commandresponse_;
      }
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void ExternalClient::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternalProtocol.ExternalClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_MessageType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ExternalProtocol.Connect connect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ExternalProtocol.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ExternalProtocol.CommandResponse commandResponse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_commandresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExternalClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExternalProtocol.ExternalClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ExternalProtocol.Connect connect = 1;
  if (_internal_has_connect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connect(this),
        _Internal::connect(this).GetCachedSize(), target, stream);
  }

  // .ExternalProtocol.Status status = 2;
  if (_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .ExternalProtocol.CommandResponse commandResponse = 3;
  if (_internal_has_commandresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::commandresponse(this),
        _Internal::commandresponse(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternalProtocol.ExternalClient)
  return target;
}

size_t ExternalClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternalProtocol.ExternalClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (MessageType_case()) {
    // .ExternalProtocol.Connect connect = 1;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MessageType_.connect_);
      break;
    }
    // .ExternalProtocol.Status status = 2;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MessageType_.status_);
      break;
    }
    // .ExternalProtocol.CommandResponse commandResponse = 3;
    case kCommandResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MessageType_.commandresponse_);
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExternalClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalClient::GetClassData() const { return &_class_data_; }


void ExternalClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExternalClient*>(&to_msg);
  auto& from = static_cast<const ExternalClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExternalProtocol.ExternalClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.MessageType_case()) {
    case kConnect: {
      _this->_internal_mutable_connect()->::ExternalProtocol::Connect::MergeFrom(
          from._internal_connect());
      break;
    }
    case kStatus: {
      _this->_internal_mutable_status()->::ExternalProtocol::Status::MergeFrom(
          from._internal_status());
      break;
    }
    case kCommandResponse: {
      _this->_internal_mutable_commandresponse()->::ExternalProtocol::CommandResponse::MergeFrom(
          from._internal_commandresponse());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalClient::CopyFrom(const ExternalClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternalProtocol.ExternalClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalClient::IsInitialized() const {
  return true;
}

void ExternalClient::InternalSwap(ExternalClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.MessageType_, other->_impl_.MessageType_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExternalProtocol_2eproto_getter, &descriptor_table_ExternalProtocol_2eproto_once,
      file_level_metadata_ExternalProtocol_2eproto[1]);
}

// ===================================================================

class Connect::_Internal {
 public:
};

void Connect::clear_devices() {
  _impl_.devices_.Clear();
}
Connect::Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExternalProtocol.Connect)
}
Connect::Connect(const Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Connect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){from._impl_.devices_}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.company_){}
    , decltype(_impl_.vehiclename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company().empty()) {
    _this->_impl_.company_.Set(from._internal_company(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vehiclename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehiclename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vehiclename().empty()) {
    _this->_impl_.vehiclename_.Set(from._internal_vehiclename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ExternalProtocol.Connect)
}

inline void Connect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){arena}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.company_){}
    , decltype(_impl_.vehiclename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vehiclename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vehiclename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:ExternalProtocol.Connect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Connect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devices_.~RepeatedPtrField();
  _impl_.sessionid_.Destroy();
  _impl_.company_.Destroy();
  _impl_.vehiclename_.Destroy();
}

void Connect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternalProtocol.Connect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _impl_.sessionid_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.vehiclename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExternalProtocol.Connect.sessionId"));
        } else
          goto handle_unusual;
        continue;
      // string company = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_company();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExternalProtocol.Connect.company"));
        } else
          goto handle_unusual;
        continue;
      // string vehicleName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vehiclename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExternalProtocol.Connect.vehicleName"));
        } else
          goto handle_unusual;
        continue;
      // repeated .InternalProtocol.Device devices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExternalProtocol.Connect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExternalProtocol.Connect.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // string company = 2;
  if (!this->_internal_company().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExternalProtocol.Connect.company");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company(), target);
  }

  // string vehicleName = 3;
  if (!this->_internal_vehiclename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehiclename().data(), static_cast<int>(this->_internal_vehiclename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExternalProtocol.Connect.vehicleName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vehiclename(), target);
  }

  // repeated .InternalProtocol.Device devices = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternalProtocol.Connect)
  return target;
}

size_t Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternalProtocol.Connect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InternalProtocol.Device devices = 4;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_impl_.devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string company = 2;
  if (!this->_internal_company().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // string vehicleName = 3;
  if (!this->_internal_vehiclename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehiclename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Connect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connect::GetClassData() const { return &_class_data_; }


void Connect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Connect*>(&to_msg);
  auto& from = static_cast<const Connect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExternalProtocol.Connect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.devices_.MergeFrom(from._impl_.devices_);
  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_vehiclename().empty()) {
    _this->_internal_set_vehiclename(from._internal_vehiclename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connect::CopyFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternalProtocol.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  return true;
}

void Connect::InternalSwap(Connect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.company_, lhs_arena,
      &other->_impl_.company_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vehiclename_, lhs_arena,
      &other->_impl_.vehiclename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Connect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExternalProtocol_2eproto_getter, &descriptor_table_ExternalProtocol_2eproto_once,
      file_level_metadata_ExternalProtocol_2eproto[2]);
}

// ===================================================================

class ConnectResponse::_Internal {
 public:
};

ConnectResponse::ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExternalProtocol.ConnectResponse)
}
ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:ExternalProtocol.ConnectResponse)
}

inline void ConnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:ExternalProtocol.ConnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
}

void ConnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternalProtocol.ConnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExternalProtocol.ConnectResponse.sessionId"));
        } else
          goto handle_unusual;
        continue;
      // .ExternalProtocol.ConnectResponse.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ExternalProtocol::ConnectResponse_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExternalProtocol.ConnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExternalProtocol.ConnectResponse.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // .ExternalProtocol.ConnectResponse.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternalProtocol.ConnectResponse)
  return target;
}

size_t ConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternalProtocol.ConnectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // .ExternalProtocol.ConnectResponse.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectResponse::GetClassData() const { return &_class_data_; }


void ConnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectResponse*>(&to_msg);
  auto& from = static_cast<const ConnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExternalProtocol.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternalProtocol.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  return true;
}

void ConnectResponse::InternalSwap(ConnectResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExternalProtocol_2eproto_getter, &descriptor_table_ExternalProtocol_2eproto_once,
      file_level_metadata_ExternalProtocol_2eproto[3]);
}

// ===================================================================

class Status::_Internal {
 public:
  using HasBits = decltype(std::declval<Status>()._impl_._has_bits_);
  static const ::InternalProtocol::DeviceStatus& devicestatus(const Status* msg);
  static void set_has_errormessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::InternalProtocol::DeviceStatus&
Status::_Internal::devicestatus(const Status* msg) {
  return *msg->_impl_.devicestatus_;
}
void Status::clear_devicestatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.devicestatus_ != nullptr) {
    delete _impl_.devicestatus_;
  }
  _impl_.devicestatus_ = nullptr;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExternalProtocol.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.devicestatus_){nullptr}
    , decltype(_impl_.devicestate_){}
    , decltype(_impl_.messagecounter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormessage()) {
    _this->_impl_.errormessage_.Set(from._internal_errormessage(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_devicestatus()) {
    _this->_impl_.devicestatus_ = new ::InternalProtocol::DeviceStatus(*from._impl_.devicestatus_);
  }
  ::memcpy(&_impl_.devicestate_, &from._impl_.devicestate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.messagecounter_) -
    reinterpret_cast<char*>(&_impl_.devicestate_)) + sizeof(_impl_.messagecounter_));
  // @@protoc_insertion_point(copy_constructor:ExternalProtocol.Status)
}

inline void Status::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.devicestatus_){nullptr}
    , decltype(_impl_.devicestate_){0}
    , decltype(_impl_.messagecounter_){0u}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:ExternalProtocol.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
  _impl_.errormessage_.Destroy();
  if (this != internal_default_instance()) delete _impl_.devicestatus_;
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternalProtocol.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.errormessage_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.devicestatus_ != nullptr) {
    delete _impl_.devicestatus_;
  }
  _impl_.devicestatus_ = nullptr;
  ::memset(&_impl_.devicestate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.messagecounter_) -
      reinterpret_cast<char*>(&_impl_.devicestate_)) + sizeof(_impl_.messagecounter_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExternalProtocol.Status.sessionId"));
        } else
          goto handle_unusual;
        continue;
      // .ExternalProtocol.Status.DeviceState deviceState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicestate(static_cast<::ExternalProtocol::Status_DeviceState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 messageCounter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.messagecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .InternalProtocol.DeviceStatus deviceStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicestatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes errorMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExternalProtocol.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExternalProtocol.Status.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // .ExternalProtocol.Status.DeviceState deviceState = 2;
  if (this->_internal_devicestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_devicestate(), target);
  }

  // uint32 messageCounter = 3;
  if (this->_internal_messagecounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_messagecounter(), target);
  }

  // .InternalProtocol.DeviceStatus deviceStatus = 4;
  if (this->_internal_has_devicestatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::devicestatus(this),
        _Internal::devicestatus(this).GetCachedSize(), target, stream);
  }

  // optional bytes errorMessage = 5;
  if (_internal_has_errormessage()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternalProtocol.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternalProtocol.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // optional bytes errorMessage = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errormessage());
  }

  // .InternalProtocol.DeviceStatus deviceStatus = 4;
  if (this->_internal_has_devicestatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.devicestatus_);
  }

  // .ExternalProtocol.Status.DeviceState deviceState = 2;
  if (this->_internal_devicestate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_devicestate());
  }

  // uint32 messageCounter = 3;
  if (this->_internal_messagecounter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_messagecounter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExternalProtocol.Status)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_has_errormessage()) {
    _this->_internal_set_errormessage(from._internal_errormessage());
  }
  if (from._internal_has_devicestatus()) {
    _this->_internal_mutable_devicestatus()->::InternalProtocol::DeviceStatus::MergeFrom(
        from._internal_devicestatus());
  }
  if (from._internal_devicestate() != 0) {
    _this->_internal_set_devicestate(from._internal_devicestate());
  }
  if (from._internal_messagecounter() != 0) {
    _this->_internal_set_messagecounter(from._internal_messagecounter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternalProtocol.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormessage_, lhs_arena,
      &other->_impl_.errormessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, _impl_.messagecounter_)
      + sizeof(Status::_impl_.messagecounter_)
      - PROTOBUF_FIELD_OFFSET(Status, _impl_.devicestatus_)>(
          reinterpret_cast<char*>(&_impl_.devicestatus_),
          reinterpret_cast<char*>(&other->_impl_.devicestatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExternalProtocol_2eproto_getter, &descriptor_table_ExternalProtocol_2eproto_once,
      file_level_metadata_ExternalProtocol_2eproto[4]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExternalProtocol.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.messagecounter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.messagecounter_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.messagecounter_));
  // @@protoc_insertion_point(copy_constructor:ExternalProtocol.StatusResponse)
}

inline void StatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.messagecounter_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:ExternalProtocol.StatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
}

void StatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternalProtocol.StatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.messagecounter_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.messagecounter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExternalProtocol.StatusResponse.sessionId"));
        } else
          goto handle_unusual;
        continue;
      // .ExternalProtocol.StatusResponse.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ExternalProtocol::StatusResponse_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 messageCounter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.messagecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExternalProtocol.StatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExternalProtocol.StatusResponse.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // .ExternalProtocol.StatusResponse.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 messageCounter = 3;
  if (this->_internal_messagecounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_messagecounter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternalProtocol.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternalProtocol.StatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // .ExternalProtocol.StatusResponse.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 messageCounter = 3;
  if (this->_internal_messagecounter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_messagecounter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }


void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusResponse*>(&to_msg);
  auto& from = static_cast<const StatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExternalProtocol.StatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_messagecounter() != 0) {
    _this->_internal_set_messagecounter(from._internal_messagecounter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternalProtocol.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.messagecounter_)
      + sizeof(StatusResponse::_impl_.messagecounter_)
      - PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExternalProtocol_2eproto_getter, &descriptor_table_ExternalProtocol_2eproto_once,
      file_level_metadata_ExternalProtocol_2eproto[5]);
}

// ===================================================================

class Command::_Internal {
 public:
  static const ::InternalProtocol::DeviceCommand& devicecommand(const Command* msg);
};

const ::InternalProtocol::DeviceCommand&
Command::_Internal::devicecommand(const Command* msg) {
  return *msg->_impl_.devicecommand_;
}
void Command::clear_devicecommand() {
  if (GetArenaForAllocation() == nullptr && _impl_.devicecommand_ != nullptr) {
    delete _impl_.devicecommand_;
  }
  _impl_.devicecommand_ = nullptr;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExternalProtocol.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.devicecommand_){nullptr}
    , decltype(_impl_.messagecounter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_devicecommand()) {
    _this->_impl_.devicecommand_ = new ::InternalProtocol::DeviceCommand(*from._impl_.devicecommand_);
  }
  _this->_impl_.messagecounter_ = from._impl_.messagecounter_;
  // @@protoc_insertion_point(copy_constructor:ExternalProtocol.Command)
}

inline void Command::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.devicecommand_){nullptr}
    , decltype(_impl_.messagecounter_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:ExternalProtocol.Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.devicecommand_;
}

void Command::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternalProtocol.Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.devicecommand_ != nullptr) {
    delete _impl_.devicecommand_;
  }
  _impl_.devicecommand_ = nullptr;
  _impl_.messagecounter_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExternalProtocol.Command.sessionId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 messageCounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.messagecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .InternalProtocol.DeviceCommand deviceCommand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicecommand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExternalProtocol.Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExternalProtocol.Command.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // uint32 messageCounter = 2;
  if (this->_internal_messagecounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_messagecounter(), target);
  }

  // .InternalProtocol.DeviceCommand deviceCommand = 3;
  if (this->_internal_has_devicecommand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::devicecommand(this),
        _Internal::devicecommand(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternalProtocol.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternalProtocol.Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // .InternalProtocol.DeviceCommand deviceCommand = 3;
  if (this->_internal_has_devicecommand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.devicecommand_);
  }

  // uint32 messageCounter = 2;
  if (this->_internal_messagecounter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_messagecounter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }


void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command*>(&to_msg);
  auto& from = static_cast<const Command&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExternalProtocol.Command)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_has_devicecommand()) {
    _this->_internal_mutable_devicecommand()->::InternalProtocol::DeviceCommand::MergeFrom(
        from._internal_devicecommand());
  }
  if (from._internal_messagecounter() != 0) {
    _this->_internal_set_messagecounter(from._internal_messagecounter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternalProtocol.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, _impl_.messagecounter_)
      + sizeof(Command::_impl_.messagecounter_)
      - PROTOBUF_FIELD_OFFSET(Command, _impl_.devicecommand_)>(
          reinterpret_cast<char*>(&_impl_.devicecommand_),
          reinterpret_cast<char*>(&other->_impl_.devicecommand_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExternalProtocol_2eproto_getter, &descriptor_table_ExternalProtocol_2eproto_once,
      file_level_metadata_ExternalProtocol_2eproto[6]);
}

// ===================================================================

class CommandResponse::_Internal {
 public:
};

CommandResponse::CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ExternalProtocol.CommandResponse)
}
CommandResponse::CommandResponse(const CommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.messagecounter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.messagecounter_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.messagecounter_));
  // @@protoc_insertion_point(copy_constructor:ExternalProtocol.CommandResponse)
}

inline void CommandResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.messagecounter_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandResponse::~CommandResponse() {
  // @@protoc_insertion_point(destructor:ExternalProtocol.CommandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
}

void CommandResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ExternalProtocol.CommandResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.messagecounter_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.messagecounter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ExternalProtocol.CommandResponse.sessionId"));
        } else
          goto handle_unusual;
        continue;
      // .ExternalProtocol.CommandResponse.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ExternalProtocol::CommandResponse_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 messageCounter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.messagecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExternalProtocol.CommandResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExternalProtocol.CommandResponse.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // .ExternalProtocol.CommandResponse.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 messageCounter = 3;
  if (this->_internal_messagecounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_messagecounter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExternalProtocol.CommandResponse)
  return target;
}

size_t CommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExternalProtocol.CommandResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // .ExternalProtocol.CommandResponse.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 messageCounter = 3;
  if (this->_internal_messagecounter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_messagecounter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandResponse::GetClassData() const { return &_class_data_; }


void CommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandResponse*>(&to_msg);
  auto& from = static_cast<const CommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ExternalProtocol.CommandResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_messagecounter() != 0) {
    _this->_internal_set_messagecounter(from._internal_messagecounter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandResponse::CopyFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExternalProtocol.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponse::IsInitialized() const {
  return true;
}

void CommandResponse::InternalSwap(CommandResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandResponse, _impl_.messagecounter_)
      + sizeof(CommandResponse::_impl_.messagecounter_)
      - PROTOBUF_FIELD_OFFSET(CommandResponse, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ExternalProtocol_2eproto_getter, &descriptor_table_ExternalProtocol_2eproto_once,
      file_level_metadata_ExternalProtocol_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ExternalProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ExternalProtocol::ExternalServer*
Arena::CreateMaybeMessage< ::ExternalProtocol::ExternalServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExternalProtocol::ExternalServer >(arena);
}
template<> PROTOBUF_NOINLINE ::ExternalProtocol::ExternalClient*
Arena::CreateMaybeMessage< ::ExternalProtocol::ExternalClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExternalProtocol::ExternalClient >(arena);
}
template<> PROTOBUF_NOINLINE ::ExternalProtocol::Connect*
Arena::CreateMaybeMessage< ::ExternalProtocol::Connect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExternalProtocol::Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::ExternalProtocol::ConnectResponse*
Arena::CreateMaybeMessage< ::ExternalProtocol::ConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExternalProtocol::ConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ExternalProtocol::Status*
Arena::CreateMaybeMessage< ::ExternalProtocol::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExternalProtocol::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::ExternalProtocol::StatusResponse*
Arena::CreateMaybeMessage< ::ExternalProtocol::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExternalProtocol::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ExternalProtocol::Command*
Arena::CreateMaybeMessage< ::ExternalProtocol::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExternalProtocol::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::ExternalProtocol::CommandResponse*
Arena::CreateMaybeMessage< ::ExternalProtocol::CommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExternalProtocol::CommandResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
