//*
// Detailed description can be found at Message structure
// document located at our Google Disk
// https://docs.google.com/document/d/1ts1DDmu5vxEagHPvB-IHTW-5ts06XoZTdIjUIOGylGo/
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: InternalProtocol.proto

//
// Internal protocol contains messages for module control.
// Specific module status, command and error messages can be found in modules folder

package ba_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Indicates if connection was successful or which error occurred
type DeviceConnectResponse_ResponseType int32

const (
	//*
	// Connection successful
	DeviceConnectResponse_OK DeviceConnectResponse_ResponseType = 0
	//*
	// Device with given name is already connected
	DeviceConnectResponse_ALREADY_CONNECTED DeviceConnectResponse_ResponseType = 1
	//*
	// Module server does not support given module
	DeviceConnectResponse_MODULE_NOT_SUPPORTED DeviceConnectResponse_ResponseType = 2
	//*
	// Module loaded by module server does not recognize given device type
	DeviceConnectResponse_DEVICE_NOT_SUPPORTED DeviceConnectResponse_ResponseType = 3
	//*
	// Device of the same deviceType with higher priority is already connected
	DeviceConnectResponse_HIGHER_PRIORITY_ALREADY_CONNECTED DeviceConnectResponse_ResponseType = 4
)

// Enum value maps for DeviceConnectResponse_ResponseType.
var (
	DeviceConnectResponse_ResponseType_name = map[int32]string{
		0: "OK",
		1: "ALREADY_CONNECTED",
		2: "MODULE_NOT_SUPPORTED",
		3: "DEVICE_NOT_SUPPORTED",
		4: "HIGHER_PRIORITY_ALREADY_CONNECTED",
	}
	DeviceConnectResponse_ResponseType_value = map[string]int32{
		"OK":                                0,
		"ALREADY_CONNECTED":                 1,
		"MODULE_NOT_SUPPORTED":              2,
		"DEVICE_NOT_SUPPORTED":              3,
		"HIGHER_PRIORITY_ALREADY_CONNECTED": 4,
	}
)

func (x DeviceConnectResponse_ResponseType) Enum() *DeviceConnectResponse_ResponseType {
	p := new(DeviceConnectResponse_ResponseType)
	*p = x
	return p
}

func (x DeviceConnectResponse_ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceConnectResponse_ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_InternalProtocol_proto_enumTypes[0].Descriptor()
}

func (DeviceConnectResponse_ResponseType) Type() protoreflect.EnumType {
	return &file_InternalProtocol_proto_enumTypes[0]
}

func (x DeviceConnectResponse_ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceConnectResponse_ResponseType.Descriptor instead.
func (DeviceConnectResponse_ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{3, 0}
}

//
// Enum for specification to which module the messages should be forwarded by internal server.
// Must mirror the enum number in InternalProtocol.proto
// RESERVED_MODULE is default module taking control of unspecified messages.
type Device_Module int32

const (
	//*
	// This is reserved place for a control module, which is default for devices that didn't set correct module
	// It may serve for messages that are not aggregated. TODO will be implemented
	Device_RESERVED_MODULE Device_Module = 0
	// Sending missions with the information about the route and stops to the autonomy
	Device_MISSION_MODULE Device_Module = 1
	// Control of car accessories
	Device_CAR_ACCESSORY_MODULE Device_Module = 2
	Device_EXAMPLE_MODULE       Device_Module = 999
)

// Enum value maps for Device_Module.
var (
	Device_Module_name = map[int32]string{
		0:   "RESERVED_MODULE",
		1:   "MISSION_MODULE",
		2:   "CAR_ACCESSORY_MODULE",
		999: "EXAMPLE_MODULE",
	}
	Device_Module_value = map[string]int32{
		"RESERVED_MODULE":      0,
		"MISSION_MODULE":       1,
		"CAR_ACCESSORY_MODULE": 2,
		"EXAMPLE_MODULE":       999,
	}
)

func (x Device_Module) Enum() *Device_Module {
	p := new(Device_Module)
	*p = x
	return p
}

func (x Device_Module) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Module) Descriptor() protoreflect.EnumDescriptor {
	return file_InternalProtocol_proto_enumTypes[1].Descriptor()
}

func (Device_Module) Type() protoreflect.EnumType {
	return &file_InternalProtocol_proto_enumTypes[1]
}

func (x Device_Module) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Module.Descriptor instead.
func (Device_Module) EnumDescriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{6, 0}
}

type InternalClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageType:
	//	*InternalClient_DeviceConnect
	//	*InternalClient_DeviceStatus
	MessageType isInternalClient_MessageType `protobuf_oneof:"MessageType"`
}

func (x *InternalClient) Reset() {
	*x = InternalClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_InternalProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalClient) ProtoMessage() {}

func (x *InternalClient) ProtoReflect() protoreflect.Message {
	mi := &file_InternalProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalClient.ProtoReflect.Descriptor instead.
func (*InternalClient) Descriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{0}
}

func (m *InternalClient) GetMessageType() isInternalClient_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (x *InternalClient) GetDeviceConnect() *DeviceConnect {
	if x, ok := x.GetMessageType().(*InternalClient_DeviceConnect); ok {
		return x.DeviceConnect
	}
	return nil
}

func (x *InternalClient) GetDeviceStatus() *DeviceStatus {
	if x, ok := x.GetMessageType().(*InternalClient_DeviceStatus); ok {
		return x.DeviceStatus
	}
	return nil
}

type isInternalClient_MessageType interface {
	isInternalClient_MessageType()
}

type InternalClient_DeviceConnect struct {
	DeviceConnect *DeviceConnect `protobuf:"bytes,1,opt,name=deviceConnect,proto3,oneof"`
}

type InternalClient_DeviceStatus struct {
	DeviceStatus *DeviceStatus `protobuf:"bytes,2,opt,name=deviceStatus,proto3,oneof"`
}

func (*InternalClient_DeviceConnect) isInternalClient_MessageType() {}

func (*InternalClient_DeviceStatus) isInternalClient_MessageType() {}

type InternalServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageType:
	//	*InternalServer_DeviceConnectResponse
	//	*InternalServer_DeviceCommand
	MessageType isInternalServer_MessageType `protobuf_oneof:"MessageType"`
}

func (x *InternalServer) Reset() {
	*x = InternalServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_InternalProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalServer) ProtoMessage() {}

func (x *InternalServer) ProtoReflect() protoreflect.Message {
	mi := &file_InternalProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalServer.ProtoReflect.Descriptor instead.
func (*InternalServer) Descriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{1}
}

func (m *InternalServer) GetMessageType() isInternalServer_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (x *InternalServer) GetDeviceConnectResponse() *DeviceConnectResponse {
	if x, ok := x.GetMessageType().(*InternalServer_DeviceConnectResponse); ok {
		return x.DeviceConnectResponse
	}
	return nil
}

func (x *InternalServer) GetDeviceCommand() *DeviceCommand {
	if x, ok := x.GetMessageType().(*InternalServer_DeviceCommand); ok {
		return x.DeviceCommand
	}
	return nil
}

type isInternalServer_MessageType interface {
	isInternalServer_MessageType()
}

type InternalServer_DeviceConnectResponse struct {
	DeviceConnectResponse *DeviceConnectResponse `protobuf:"bytes,1,opt,name=deviceConnectResponse,proto3,oneof"`
}

type InternalServer_DeviceCommand struct {
	DeviceCommand *DeviceCommand `protobuf:"bytes,2,opt,name=deviceCommand,proto3,oneof"`
}

func (*InternalServer_DeviceConnectResponse) isInternalServer_MessageType() {}

func (*InternalServer_DeviceCommand) isInternalServer_MessageType() {}

//*
// Device connect information.
// Device connect message is used for establishing connection from module client to module server
// send as first message from module client to module server
type DeviceConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceConnect) Reset() {
	*x = DeviceConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_InternalProtocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConnect) ProtoMessage() {}

func (x *DeviceConnect) ProtoReflect() protoreflect.Message {
	mi := &file_InternalProtocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConnect.ProtoReflect.Descriptor instead.
func (*DeviceConnect) Descriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceConnect) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

//*
// Device connect response information.
// Device connect response message is used for establishing connection from module client to module server
// send as response to deviceConnect message from module server to module client
type DeviceConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseType DeviceConnectResponse_ResponseType `protobuf:"varint,1,opt,name=responseType,proto3,enum=InternalProtocol.DeviceConnectResponse_ResponseType" json:"responseType,omitempty"`
	Device       *Device                            `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceConnectResponse) Reset() {
	*x = DeviceConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_InternalProtocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConnectResponse) ProtoMessage() {}

func (x *DeviceConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_InternalProtocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConnectResponse.ProtoReflect.Descriptor instead.
func (*DeviceConnectResponse) Descriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceConnectResponse) GetResponseType() DeviceConnectResponse_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return DeviceConnectResponse_OK
}

func (x *DeviceConnectResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type DeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device     *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	StatusData []byte  `protobuf:"bytes,2,opt,name=statusData,proto3" json:"statusData,omitempty"`
}

func (x *DeviceStatus) Reset() {
	*x = DeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_InternalProtocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatus) ProtoMessage() {}

func (x *DeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_InternalProtocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatus.ProtoReflect.Descriptor instead.
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceStatus) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceStatus) GetStatusData() []byte {
	if x != nil {
		return x.StatusData
	}
	return nil
}

//
// binary command data
type DeviceCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device      *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	CommandData []byte  `protobuf:"bytes,2,opt,name=commandData,proto3" json:"commandData,omitempty"`
}

func (x *DeviceCommand) Reset() {
	*x = DeviceCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_InternalProtocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCommand) ProtoMessage() {}

func (x *DeviceCommand) ProtoReflect() protoreflect.Message {
	mi := &file_InternalProtocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCommand.ProtoReflect.Descriptor instead.
func (*DeviceCommand) Descriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceCommand) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceCommand) GetCommandData() []byte {
	if x != nil {
		return x.CommandData
	}
	return nil
}

//
// Identification of a device. Only devices with unique module-deviceType-dataProvider combination can be connected.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Serves for internal client to forward message to the correct module.
	Module Device_Module `protobuf:"varint,1,opt,name=module,proto3,enum=InternalProtocol.Device_Module" json:"module,omitempty"`
	//
	// Device type is module implementation dependent, it is recommended to implement as enumeration.
	DeviceType uint32 `protobuf:"varint,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	//*
	// name of role that the device provides, serves for distinction of devices
	// important in device connection, where only single device of a deviceRole type can be connected to a module.
	DeviceRole string `protobuf:"bytes,3,opt,name=deviceRole,proto3" json:"deviceRole,omitempty"`
	//
	// device name
	DeviceName string `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	//
	// Priority of the device. Max priority = 0
	Priority uint32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_InternalProtocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_InternalProtocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_InternalProtocol_proto_rawDescGZIP(), []int{6}
}

func (x *Device) GetModule() Device_Module {
	if x != nil {
		return x.Module
	}
	return Device_RESERVED_MODULE
}

func (x *Device) GetDeviceType() uint32 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *Device) GetDeviceRole() string {
	if x != nil {
		return x.DeviceRole
	}
	return ""
}

func (x *Device) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *Device) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

var File_InternalProtocol_proto protoreflect.FileDescriptor

var file_InternalProtocol_proto_rawDesc = []byte{
	0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5f,
	0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x15, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x22, 0x60, 0x0a, 0x0c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a,
	0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xa6, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0x67, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0e, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x10, 0xe7, 0x07, 0x22, 0x05, 0x08, 0x03, 0x10, 0xe6, 0x07, 0x42, 0x3e, 0x5a, 0x21, 0x2e,
	0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x62,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x62, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0xaa, 0x02, 0x18, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x62, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_InternalProtocol_proto_rawDescOnce sync.Once
	file_InternalProtocol_proto_rawDescData = file_InternalProtocol_proto_rawDesc
)

func file_InternalProtocol_proto_rawDescGZIP() []byte {
	file_InternalProtocol_proto_rawDescOnce.Do(func() {
		file_InternalProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_InternalProtocol_proto_rawDescData)
	})
	return file_InternalProtocol_proto_rawDescData
}

var file_InternalProtocol_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_InternalProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_InternalProtocol_proto_goTypes = []interface{}{
	(DeviceConnectResponse_ResponseType)(0), // 0: InternalProtocol.DeviceConnectResponse.ResponseType
	(Device_Module)(0),                      // 1: InternalProtocol.Device.Module
	(*InternalClient)(nil),                  // 2: InternalProtocol.InternalClient
	(*InternalServer)(nil),                  // 3: InternalProtocol.InternalServer
	(*DeviceConnect)(nil),                   // 4: InternalProtocol.DeviceConnect
	(*DeviceConnectResponse)(nil),           // 5: InternalProtocol.DeviceConnectResponse
	(*DeviceStatus)(nil),                    // 6: InternalProtocol.DeviceStatus
	(*DeviceCommand)(nil),                   // 7: InternalProtocol.DeviceCommand
	(*Device)(nil),                          // 8: InternalProtocol.Device
}
var file_InternalProtocol_proto_depIdxs = []int32{
	4,  // 0: InternalProtocol.InternalClient.deviceConnect:type_name -> InternalProtocol.DeviceConnect
	6,  // 1: InternalProtocol.InternalClient.deviceStatus:type_name -> InternalProtocol.DeviceStatus
	5,  // 2: InternalProtocol.InternalServer.deviceConnectResponse:type_name -> InternalProtocol.DeviceConnectResponse
	7,  // 3: InternalProtocol.InternalServer.deviceCommand:type_name -> InternalProtocol.DeviceCommand
	8,  // 4: InternalProtocol.DeviceConnect.device:type_name -> InternalProtocol.Device
	0,  // 5: InternalProtocol.DeviceConnectResponse.responseType:type_name -> InternalProtocol.DeviceConnectResponse.ResponseType
	8,  // 6: InternalProtocol.DeviceConnectResponse.device:type_name -> InternalProtocol.Device
	8,  // 7: InternalProtocol.DeviceStatus.device:type_name -> InternalProtocol.Device
	8,  // 8: InternalProtocol.DeviceCommand.device:type_name -> InternalProtocol.Device
	1,  // 9: InternalProtocol.Device.module:type_name -> InternalProtocol.Device.Module
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_InternalProtocol_proto_init() }
func file_InternalProtocol_proto_init() {
	if File_InternalProtocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_InternalProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_InternalProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_InternalProtocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_InternalProtocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_InternalProtocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_InternalProtocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_InternalProtocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_InternalProtocol_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InternalClient_DeviceConnect)(nil),
		(*InternalClient_DeviceStatus)(nil),
	}
	file_InternalProtocol_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*InternalServer_DeviceConnectResponse)(nil),
		(*InternalServer_DeviceCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_InternalProtocol_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_InternalProtocol_proto_goTypes,
		DependencyIndexes: file_InternalProtocol_proto_depIdxs,
		EnumInfos:         file_InternalProtocol_proto_enumTypes,
		MessageInfos:      file_InternalProtocol_proto_msgTypes,
	}.Build()
	File_InternalProtocol_proto = out.File
	file_InternalProtocol_proto_rawDesc = nil
	file_InternalProtocol_proto_goTypes = nil
	file_InternalProtocol_proto_depIdxs = nil
}
